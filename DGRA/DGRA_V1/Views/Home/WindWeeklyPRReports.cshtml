@using Newtonsoft.Json;
@using Microsoft.AspNetCore.Http;
@inject IHttpContextAccessor HttpContextAccessor

@{
    ViewData["Title"] = "Wind Weekly Reports";
}
@{
    string windSiteList = "";
    var usermodel = JsonConvert.DeserializeObject<UserAccess>(@HttpContextAccessor.HttpContext.Session.GetString("UserAccess"));

}
@for (int i = 0; i < @usermodel.access_list.Count; i++)
{

    if (@usermodel.access_list[i].page_type == 3 && @usermodel.access_list[i].site_type == 1)
    {
        windSiteList += @usermodel.access_list[i].identity.ToString() + ",";
    }
}
<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,400i,700&display=fallback">
<!-- Font Awesome -->
<link rel="stylesheet" href="~/Content/theme/plugins/fontawesome-free/css/all.min.css">
<!-- daterange picker -->
<link rel="stylesheet" href="~/Content/theme/plugins/daterangepicker/daterangepicker.css">
<!-- DataTables -->
<link rel="stylesheet" href="~/Content/theme/plugins/datatables-bs4/css/dataTables.bootstrap4.min.css">
<link rel="stylesheet" href="~/Content/theme/plugins/datatables-responsive/css/responsive.bootstrap4.min.css">
<link rel="stylesheet" href="~/Content/theme/plugins/datatables-buttons/css/buttons.bootstrap4.min.css">
<!-- dropdown search -->
<link href="https://unpkg.com/multiple-select@1.5.2/dist/multiple-select.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/jquery/dist/jquery.min.js"></script>
<script src="https://unpkg.com/multiple-select@1.5.2/dist/multiple-select.min.js"></script>

<link href="~/Content/theme/dist/css/adminlte.css" rel="stylesheet" />
<style>
    .tab-btn {
        font-size: 0.7rem;
        font-weight: bold;
    }

    .card-body {
    }
    hr {
        margin-top: -5px !important;
    }
</style>

<div class="content-wrapper">

    <section class="content-header">
    </section>

    <section class="content">
        <div class="card">
            <div class="card-header">
                <h3 class="card-title text-center">Wind Weekly Performance Reports</h3>
            </div>
            

            <div class="card-body">
                <div class="tab-content" id="custom-tabs-two-tabContent">
                    <div class="tab-pane fade show active" id="custom-tabs-two-op" role="tabpanel" aria-labelledby="custom-tabs-two-op-tab">
                        <div class="row">
                            <!--<div class="col-sm-4">
        <div class="form-group">
            <div class="row">
                <label class="col-sm-2 col-form-label text-left">FY : </label>
                <select class="form-control  col-sm-8" id="fy" name="fy" value="">
                    <option value="">Select Financial Year</option>
                </select>
            </div>
        </div>
    </div>-->
                            <div class="col-sm-4">
                                <div class="input-group ">
                                    <label class="col-sm-2 col-form-label text-left">Date : </label>
                                    <div class="input-group-prepend">
                                        <span class="input-group-text">
                                            <i class="far fa-calendar-alt"></i>
                                        </span>
                                    </div>
                                    <input type="text" class="form-control float-right" id="daterange" name="daterange">
                                </div>
                            </div>

                            <div class="col-sm-2">
                                <button type="button" class="btn btn-block btn-primary" onclick="GetOperationWKPR();">Search</button>
                            </div>
                            <div class="col-sm-6"></div>

                            <br><br>
                            <hr>
                        </div>
                        <hr>
                        <div id="loader" class="loader  center" style="display:none"></div>
                        <div class="row" id="wk_head" style="display:none">
                            <div class="col-sm-5 text-center" id="wk_head_sec1">

                            </div>
                            <div class="col-sm-3" id="wk_head_sec2">

                            </div>
                            <div class="col-sm-4" id="wk_head_sec3">

                            </div>
                        </div>
                        <hr>
                        <div class="row">
                            <div class="chart col-sm-4" style="padding:10px;">
                                <canvas id="energy_mu_chart" style="min-height: 250px; height: 250px; max-height: 250px; max-width: 100%;"></canvas>
                            </div>
                            <div class="chart col-sm-4" style="padding:10px;">
                                <canvas id="wind_sp_chart" style="min-height: 250px; height: 250px; max-height: 250px; max-width: 100%;"></canvas>
                            </div>
                            <div class="chart col-sm-4" style="padding:10px;">
                                <canvas id="plf_chart" style="min-height: 250px; height: 250px; max-height: 250px; max-width: 100%;"></canvas>
                            </div>
                        </div>
                        <hr>

                        <div class="row">

                            <div class="chart col-sm-4 " style="padding:10px;">
                                <canvas id="ma_chart" style="min-height: 250px; height: 250px; max-height: 250px; max-width: 100%;"></canvas>
                            </div>
                            <div class="chart col-sm-4" style="padding:10px;">
                                <canvas id="ega_chart" style="min-height: 250px; height: 250px; max-height: 250px; max-width: 100%;"></canvas>
                            </div>
                            <div class="chart col-sm-4" style="padding:10px;">
                                <canvas id="iga_chart" style="min-height: 250px; height: 250px; max-height: 250px; max-width: 100%;"></canvas>
                            </div>
                        </div>
                        <hr>
                        <div class="card-header">
                            <h3 class="card-title text-center">Performance By Site</h3>
                        </div>
                        <br>
                        <div id="reportsDaily" style="overflow-x: auto;" class="reportsDaily"></div>
                        <div class="row" id="sitewisechart">
                            <div class="chart col-sm-6 text-center">
                                <!--<h5>Energy (MUs) </h5>-->
                                <canvas id="energy_chart_pr" style="min-height: 350px; height: 350px; max-height: 350px; max-width: 100%;"></canvas>
                            </div>
                            <div class="chart col-sm-6 text-center">
                                <!--<h5>Wind (m/s) </h5>-->
                                <canvas id="wind_chart_pr" style="min-height: 350px; height: 350px; max-height: 350px; max-width: 100%;"></canvas>
                            </div>

                        </div>
                        <hr>
                        <div class="card-header">
                            <h3 class="card-title text-center">Performance By SPV</h3>
                        </div>
                        <br>
                        <div id="reportsDaily1" style="overflow-x: auto;" class="reportsDaily1"></div>
                        <div class="row" id="spvwisechart">
                            <div class="col-sm-3 text-center"></div>
                                <div class="col-sm-6 text-center">
                                    <canvas id="pieChart" style="min-height: 350px; height: 350px; max-height: 350px; max-width: 100%;"></canvas>
                                </div>
                                <div class="col-sm-3 text-center"></div>
                            </div>

                            <hr>
                            <div class="card-header">
                                <h3 class="card-title text-center">Major Brekdown Reports</h3>
                            </div>
                            <br>
                            <div id="majorBreakdown"></div>
                        </div>
                    
                </div>

            </div>
        </div>


    </section>

</div>
<script src="~/Content/theme/plugins/jquery/jquery.js"></script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.1.0/jquery.min.js"></script>
<script src="~/Content/theme/plugins/moment/moment.min.js"></script>
<script src="~/Content/theme/plugins/daterangepicker/daterangepicker.js" defer></script>
<script src="~/Content/theme/plugins/tempusdominus-bootstrap-4/js/tempusdominus-bootstrap-4.min.js"></script>

<script src="~/Content/theme/plugins/summernote/summernote-bs4.min.js"></script>
<!--Datatable -->
<script src="~/Content/theme/plugins/datatables/jquery.dataTables.min.js"></script>
<script src="~/Content/theme/plugins/datatables/jquery.dataTables.js" defer></script>

<script src="~/Content/theme/plugins/datatables-buttons/js/dataTables.buttons.min.js" defer></script>
<script src="~/Content/theme/plugins/jszip/jszip.min.js" defer></script>
<script src="~/Content/theme/plugins/datatables-buttons/js/buttons.html5.min.js" defer></script>
<script src="~/Content/theme/plugins/pdfmake/pdfmake.min.js" defer></script>
<script src="~/Content/theme/plugins/datatables-buttons/js/buttons.colVis.min.js" defer></script>
<script src="~/Content/theme/plugins/chart.js/Chart.min.js"></script>
<script src="~/Content/theme/dist/js/comman.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js@3.0.0/dist/chart.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2.0.0-rc"></script>

<script type="text/javascript">
    var fyear = "";
    $(document).ready(function () {


        $('#daterange').daterangepicker(
            {
                singleDatePicker: true,
                maxDate: new Date(),
                locale: {
                    format: 'DD/MM/YYYY',
                }
            });


    });
    window.onload = function () {
        var today = new Date();
        fyear = getFinancialYear(today);
       // getYear();
    }
    var actual_mu = [];
    var target_mu = [];
    var var_mu_pos = [];
    var var_mu_neg = [];

    var actual_wind = [];
    var target_wind = [];
    var var_wind_pos = [];
    var var_wind_neg = [];

    var actual_plf = [];
    var target_plf = [];
    var var_plf_pos = [];
    var var_plf_neg = [];

    var actual_ma = [];
    var target_ma = [];
    var var_ma_pos = [];
    var var_ma_neg = [];

    var actual_iga = [];
    var target_iga = [];
    var var_iga_pos = [];
    var var_iga_neg = [];

    var actual_ega = [];
    var target_ega = [];
    var var_ega_pos = [];
    var var_ega_neg = [];
    var revenue = [];
   var  Diff_Mus = [];
   


    function GetOperationWKPR() {

        document.getElementById("loader").style.display = 'flex';
        var tar_energy_wk = 0;
        var act_energy_wk = 0;
        var energy_var_wk =0
        var tar_wind_wk = 0;
        var act_wind_wk = 0;
        var wind_var_wk = 0;
        var tar_plf_wk = 0;
        var act_plf_wk = 0;
        var plf_var_wk = 0;
        var tar_ma_wk = 0;
        var act_ma_wk = 0;
        var ma_var_wk = 0;
        var tar_iga_wk = 0;
        var act_iga_wk = 0;
        var iga_var_wk = 0;
        var tar_ega_wk = 0;
        var act_ega_wk = 0;
        var ega_var_wk = 0;
        var total_revenue_wk = 0;
        var total_capacity = 0;
        var total_revenue = 0;
        var total_tarriff_wk = 0;
        var daterange = $('#daterange').val();
        const dateArr = daterange.split("/");
        var seldate = new Date(dateArr[2], dateArr[1] - 1, dateArr[0]);
        var fromDate = GetWeeklyDays(seldate);

        var toDate = `${dateArr[2]}-${dateArr[1]}-${dateArr[0]}`;
        var fy = fyear;//$('select#fy option:selected').val();
        var site_ids = "@Html.Raw(windSiteList.TrimEnd(','))";

        $.ajax({
            type: "GET",
            url: '@Url.Action("GetWeeklyOperation", "WindReport")' + '?fy=' + fy + '&fromDate=' + fromDate + '&toDate=' + toDate + '&site=' + site_ids,
            contentType: "application/json; charset=utf-8",
            datatype: "html",
            success: function (result, status, xhr) {
                console.log(result);

                actual_mu = [];
                target_mu = [];
                var_mu_pos = [];
                var_mu_neg = [];
                actual_wind = [];
                target_wind = [];
                var_wind_pos = [];
                var_wind_neg = [];
                actual_plf = [];
                target_plf = [];
                var_plf_pos = [];
                var_plf_neg = [];
                actual_ma = [];
                target_ma = [];
                var_ma_pos = [];
                var_ma_neg = [];
                actual_iga = [];
                target_iga = [];
                var_iga_pos = [];
                var_iga_neg = [];
                actual_ega = [];
                target_ega = [];
                var_ega_pos = [];
                var_ega_neg = [];
                revenue = [];
                Diff_Mus = [];
                for (var i = 0; i < result.length; i++) {
                   
                    let tar_mu = 0;
                    tar_energy_wk += result[i].tar_kwh_mu / 1000000;
                    total_capacity += result[i].total_mw;
                    //tar_energy_wk += (result[i].tar_kwh_mu / 1000000) * result[i].total_mw;
                    act_energy_wk += result[i].act_jmr_kwh_mu;
                    total_tarriff_wk +=result[i].total_tarrif;
                    //revenue = ((result[i].act_jmr_kwh_mu - tar_mu) * result[i].total_tarrif);
                    //total_revenue += revenue;
                    tar_wind_wk += result[i].tar_wind * result[i].total_mw;
                    act_wind_wk += result[i].act_Wind * result[i].total_mw;
                    
                    tar_plf_wk += result[i].tar_plf * result[i].total_mw;
                    act_plf_wk += result[i].act_plf * result[i].total_mw;
                   
                    tar_ma_wk += result[i].tar_ma * result[i].total_mw;
                    act_ma_wk += result[i].act_ma * result[i].total_mw;
                    
                    tar_iga_wk += result[i].tar_iga * result[i].total_mw;
                    act_iga_wk += result[i].act_iga * result[i].total_mw;
                    
                    tar_ega_wk += result[i].tar_ega * result[i].total_mw;
                    act_ega_wk += result[i].act_ega * result[i].total_mw;
                    total_revenue_wk += (result[i].act_jmr_kwh_mu - (result[i].tar_kwh_mu/1000000)) * result[i].total_tarrif;

                    //total_revenue += revenue;
                }
                let avg_tar_mu = 0;
                let avg_tar_wind = 0;
                let avg_tar_plf = 0;
                let avg_tar_ma = 0;
                let avg_tar_iga = 0;
                let avg_tar_ega = 0;
                let avg_act_wind = 0;
                let avg_act_plf = 0;
                let avg_act_ma = 0;
                let avg_act_iga = 0;
                let avg_act_ega = 0;
                if (total_capacity != 0) {
                    //avg_tar_mu = tar_energy_wk / total_capacity;
                    avg_tar_wind = tar_wind_wk / total_capacity;
                    avg_act_wind = act_wind_wk / total_capacity;

                    avg_tar_plf = tar_plf_wk / total_capacity;
                    avg_act_plf = act_plf_wk / total_capacity;

                    avg_tar_ma = tar_ma_wk / total_capacity;
                    avg_act_ma = act_ma_wk / total_capacity;

                    avg_tar_iga = tar_iga_wk / total_capacity;
                    avg_act_iga = act_iga_wk / total_capacity;

                    avg_tar_ega = tar_ega_wk / total_capacity;
                    avg_act_ega = act_ega_wk / total_capacity;
                }
                if (tar_energy_wk != 0) {
                    energy_var_wk = (((act_energy_wk - tar_energy_wk) / tar_energy_wk) * 100);
                }
                if (avg_tar_wind != 0) {
                    wind_var_wk = ((avg_act_wind.toFixed(2) - avg_tar_wind.toFixed(2)) / avg_tar_wind.toFixed(2)) * 100;
                }
                console.log("act", act_energy_wk);
                console.log("tar", tar_energy_wk);
                console.log("tarif", total_tarriff_wk);
               
                revenue.push(total_revenue_wk);
               
                diff_MUs_wk = (act_energy_wk - tar_energy_wk);
                Diff_Mus.push(diff_MUs_wk.toFixed(1));
                plf_var_wk = (avg_act_plf - avg_tar_plf);
                ma_var_wk = (avg_act_ma - avg_tar_ma);
                iga_var_wk = (avg_act_iga - avg_tar_iga);
                ega_var_wk = (avg_act_ega - avg_tar_ega);
                
                // MU 
                let en_pasitive;
                let en_negative;
                if (energy_var_wk < 0) {
                    en_negative = (energy_var_wk).toFixed(1);
                }
                else {
                    en_pasitive = (energy_var_wk).toFixed(1);
                }
                actual_mu.push(act_energy_wk.toFixed(1));
                target_mu.push(tar_energy_wk.toFixed(1));
                var_mu_pos.push(en_pasitive);
                var_mu_neg.push(en_negative);

              //Wind
                let w_positive;
                let w_negative;
                if (wind_var_wk < 0) {
                    w_negative = (wind_var_wk).toFixed(1);
                }
                else {
                    w_positive = (wind_var_wk ).toFixed(1);
                }
                actual_wind.push(avg_act_wind.toFixed(1));
                target_wind.push(avg_tar_wind.toFixed(1));
                var_wind_pos.push(w_positive);
                var_wind_neg.push(w_negative);
                //plf
                let plf_positive;
                let plf_negative;
                if (plf_var_wk < 0) {
                    plf_negative = plf_var_wk.toFixed(1);
                }
                else {
                    plf_positive = plf_var_wk.toFixed(1);
                }
                //Push PLF Weekly
                actual_plf.push(avg_act_plf.toFixed(1));
                target_plf.push(avg_tar_plf.toFixed(1));
                var_plf_pos.push(plf_positive);
                var_plf_neg.push(plf_negative);
                //MA
                let ma_positive;
                let ma_negative;
                if (ma_var_wk < 0) {
                    ma_negative = ma_var_wk.toFixed(1);
                }
                else {
                    ma_positive = ma_var_wk.toFixed(1);
                }
                // Push Weekly MA
                actual_ma.push(avg_act_ma.toFixed(1));
                target_ma.push(avg_tar_ma.toFixed(1));
                var_ma_pos.push(ma_positive);
                var_ma_neg.push(ma_negative);
                //IGA
                let iga_positive;
                let iga_negative;
                if (iga_var_wk < 0) {
                    iga_negative = iga_var_wk.toFixed(1);
                }
                else {
                    iga_positive = iga_var_wk.toFixed(1);
                }
                // Push Weekly IGA
                actual_iga.push(avg_act_iga.toFixed(1));
                target_iga.push(avg_tar_iga.toFixed(1));
                var_iga_pos.push(iga_positive);
                var_iga_neg.push(iga_negative);
                //EGA Calculation
               
                let ega_positive;
                let ega_negative;
                if (ega_var_wk < 0) {
                    ega_negative = ega_var_wk.toFixed(1);
                }
                else {
                    ega_positive = ega_var_wk.toFixed(1);
                }
                // Push Weekly EGA
                actual_ega.push(avg_act_ega.toFixed(1));
                target_ega.push(avg_tar_ega.toFixed(1));
                var_ega_pos.push(ega_positive);
                var_ega_neg.push(ega_negative);


               // revenue.push(result[0].revenue);
                /*tar_energy_wk = result[0].tar_kwh_mu / 1000000;
                act_energy_wk = result[0].act_jmr_kwh_mu;
                energy_var_wk = (act_energy_wk - tar_energy_wk) / tar_energy_wk;  // variant calculation for Energy MUS
                let en_pasitive;
                let en_negative;
                if (energy_var_wk < 0) {
                    en_negative = (energy_var_wk*100).toFixed(1);
                }
                else {
                    en_pasitive = (energy_var_wk*100).toFixed(1);
                }
                //let cal_revenue_wk = (act_energy_wk - tar_energy_wk) * result[0].total_tarrif;
                diff_MUs_wk = (act_energy_wk - tar_energy_wk);
                Diff_Mus.push(diff_MUs_wk.toFixed(1));
                revenue.push(result[0].revenue);*/
                // Push Weekly Enery
               /* actual_mu.push(act_energy_wk.toFixed(1));
                target_mu.push(tar_energy_wk.toFixed(1));
                var_mu_pos.push(en_pasitive);
                var_mu_neg.push(en_negative);

                // Start wind calculation
                tar_wind_wk = result[0].tar_wind;
                act_wind_wk = result[0].act_Wind;
                wind_var_wk = (act_wind_wk - tar_wind_wk) / tar_wind_wk;
                let w_positive;
                let w_negative;
                if (wind_var_wk < 0) {
                    w_negative = (wind_var_wk*100).toFixed(1);
                }
                else {
                    w_positive = (wind_var_wk*100).toFixed(1);
                }
                //Push WInd Weekly
                actual_wind.push(act_wind_wk.toFixed(1));
                target_wind.push(tar_wind_wk.toFixed(1));
                var_wind_pos.push(w_positive);
                var_wind_neg.push(w_negative);

                // PLF Calculations
                tar_plf_wk = result[0].tar_plf;
                act_plf_wk = result[0].act_plf;
                plf_var_wk = (act_plf_wk - tar_plf_wk);

                let plf_positive;
                let plf_negative;
                if (plf_var_wk < 0) {
                    plf_negative = plf_var_wk.toFixed(1);
                }
                else {
                    plf_positive = plf_var_wk.toFixed(1);
                }
                //Push PLF Weekly
                actual_plf.push(act_plf_wk.toFixed(1));
                target_plf.push(tar_plf_wk.toFixed(1));
                var_plf_pos.push(plf_positive);
                var_plf_neg.push(plf_negative);
                // MA Calcultion
                tar_ma_wk = result[0].tar_ma;
                act_ma_wk = result[0].act_ma;
                ma_var_wk = (act_ma_wk - tar_ma_wk);
                let ma_positive;
                let ma_negative;
                if (ma_var_wk < 0) {
                    ma_negative = ma_var_wk.toFixed(1);
                }
                else {
                    ma_positive = ma_var_wk.toFixed(1);
                }
                // Push Weekly MA
                actual_ma.push(act_ma_wk.toFixed(1));
                target_ma.push(tar_ma_wk.toFixed(1));
                var_ma_pos.push(ma_positive);
                var_ma_neg.push(ma_negative);
               //Calcultion IGA
                tar_iga_wk = result[0].tar_iga;
                act_iga_wk = result[0].act_iga;
                iga_var_wk = (act_iga_wk - tar_iga_wk);
                let iga_positive;
                let iga_negative;
                if (iga_var_wk < 0) {
                    iga_negative = iga_var_wk.toFixed(1);
                }
                else {
                    iga_positive = iga_var_wk.toFixed(1);
                }
                // Push Weekly IGA
                actual_iga.push(act_iga_wk.toFixed(1));
                target_iga.push(tar_iga_wk.toFixed(1));
                var_iga_pos.push(iga_positive);
                var_iga_neg.push(iga_negative);
                //EGA Calculation
                tar_ega_wk = result[0].tar_ega;
                act_ega_wk = result[0].act_ega;
                ega_var_wk = (act_ega_wk - tar_ega_wk);
                let ega_positive;
                let ega_negative;
                if (ega_var_wk < 0) {
                    ega_negative = ega_var_wk.toFixed(1);
                }
                else {
                    ega_positive = ega_var_wk.toFixed(1);
                }
                // Push Weekly EGA
                actual_ega.push(act_ega_wk.toFixed(1));
                target_ega.push(tar_ega_wk.toFixed(1));
                var_ega_pos.push(ega_positive);
                var_ega_neg.push(ega_negative);*/

                GetOperationMonthlyPR();   //Call Function for get monthly Data
                GetWindMajorBreakdown();
                document.getElementById("loader").style.display = 'none';
            }

        });
    }

    function GetOperationMonthlyPR() {
        var tar_energy_mn = 0;
        var act_energy_mn = 0;
        var energy_var_mn = 0
        var tar_wind_mn = 0;
        var act_wind_mn = 0;
        var wind_var_mn = 0;
        var tar_plf_mn = 0;
        var act_plf_mn = 0;
        var plf_var_mn = 0;
        var tar_ma_mn = 0;
        var act_ma_mn = 0;
        var ma_var_mn = 0;
        var tar_iga_mn = 0;
        var act_iga_mn = 0;
        var iga_var_mn = 0;
        var tar_ega_mn = 0;
        var act_ega_mn = 0;
        var ega_var_mn = 0;
        var total_revenue_mn = 0;
        var diff_MUs_mn = 0;
        var total_capacity_mn = 0;
        var total_tarriff_mn = 0;
        var daterange = $('#daterange').val();
        const dateArr = daterange.split("/");
        var setDate = new Date(dateArr[2], dateArr[1] - 1, dateArr[0]);
        //console.log(toDate);
        var monthdate = GetMonthDate(setDate);
        //console.log("Start Date :", monthdate.startdate);
        var toDate = `${dateArr[2]}-${dateArr[1]}-${dateArr[0]}`;
        var fromDate = monthdate.startdate;
        var fy = fyear;//$('select#fy option:selected').val();
        var site_ids = "@Html.Raw(windSiteList.TrimEnd(','))";
        $.ajax({
            type: "GET",
            url: '@Url.Action("GetMontlyOperation", "WindReport")' + '?fy=' + fy + '&fromDate=' + fromDate + '&toDate=' + toDate + '&site=' + site_ids,
            //url: "/WindReport/GetMontlyOperation?fy=" + fy + "&fromDate=" + fromDate + "&toDate=" + toDate + "&site=" + site_ids,
            contentType: "application/json; charset=utf-8",
            datatype: "html",
            success: function (result, status, xhr) {

                for (var i = 0; i < result.length; i++) {

                    let tar_mu_mn = 0;
                    tar_energy_mn += result[i].tar_kwh_mu / 1000000;
                    total_capacity_mn += result[i].total_mw;
                    //tar_energy_wk += (result[i].tar_kwh_mu / 1000000) * result[i].total_mw;
                    act_energy_mn += result[i].act_jmr_kwh_mu;
                    total_tarriff_mn += result[i].total_tarrif;
                    //revenue = ((result[i].act_jmr_kwh_mu - tar_mu) * result[i].total_tarrif);
                    //total_revenue += revenue;
                    tar_wind_mn += result[i].tar_wind * result[i].total_mw;
                    act_wind_mn += result[i].act_Wind * result[i].total_mw;

                    tar_plf_mn += result[i].tar_plf * result[i].total_mw;
                    act_plf_mn += result[i].act_plf * result[i].total_mw;

                    tar_ma_mn += result[i].tar_ma * result[i].total_mw;
                    act_ma_mn += result[i].act_ma * result[i].total_mw;

                    tar_iga_mn += result[i].tar_iga * result[i].total_mw;
                    act_iga_mn += result[i].act_iga * result[i].total_mw;

                    tar_ega_mn += result[i].tar_ega * result[i].total_mw;
                    act_ega_mn += result[i].act_ega * result[i].total_mw;
                    total_revenue_mn += (result[i].act_jmr_kwh_mu - (result[i].tar_kwh_mu / 1000000)) * result[i].total_tarrif;

                }
                let avg_tar_mu_mn = 0;
                let avg_tar_wind_mn = 0;
                let avg_tar_plf_mn = 0;
                let avg_tar_ma_mn = 0;
                let avg_tar_iga_mn = 0;
                let avg_tar_ega_mn = 0;
                let avg_act_wind_mn = 0;
                let avg_act_plf_mn = 0;
                let avg_act_ma_mn = 0;
                let avg_act_iga_mn = 0;
                let avg_act_ega_mn = 0;
                if (total_capacity_mn != 0) {
                    //avg_tar_mu = tar_energy_wk / total_capacity;
                    avg_tar_wind_mn = tar_wind_mn / total_capacity_mn;
                    avg_act_wind_mn = act_wind_mn / total_capacity_mn;

                    avg_tar_plf_mn = tar_plf_mn / total_capacity_mn;
                    avg_act_plf_mn = act_plf_mn / total_capacity_mn;

                    avg_tar_ma_mn = tar_ma_mn / total_capacity_mn;
                    avg_act_ma_mn = act_ma_mn / total_capacity_mn;

                    avg_tar_iga_mn = tar_iga_mn / total_capacity_mn;
                    avg_act_iga_mn = act_iga_mn / total_capacity_mn;

                    avg_tar_ega_mn = tar_ega_mn / total_capacity_mn;
                    avg_act_ega_mn = act_ega_mn / total_capacity_mn;
                }
                if (tar_energy_mn != 0) {
                    energy_var_mn = (((act_energy_mn - tar_energy_mn) / tar_energy_mn) * 100);
                }
                if (avg_tar_wind_mn != 0) {
                    wind_var_mn = ((avg_act_wind_mn.toFixed(2) - avg_tar_wind_mn.toFixed(2)) / avg_tar_wind_mn.toFixed(2)) * 100;
                }
               
                revenue.push(total_revenue_mn);
                diff_MUs_mn = (act_energy_mn - tar_energy_mn);
                Diff_Mus.push(diff_MUs_mn.toFixed(1));
                plf_var_mn = (avg_act_plf_mn - avg_tar_plf_mn);
                ma_var_mn = (avg_act_ma_mn - avg_tar_ma_mn);
                iga_var_mn = (avg_act_iga_mn - avg_tar_iga_mn);
                ega_var_mn = (avg_act_ega_mn - avg_tar_ega_mn);

                // MU 

                let en_pasitive;
                let en_negative;
                if (energy_var_mn < 0) {
                    en_negative = (energy_var_mn).toFixed(1);
                }
                else {
                    en_pasitive = (energy_var_mn).toFixed(1);
                }
                actual_mu.push(act_energy_mn.toFixed(1));
                target_mu.push(tar_energy_mn.toFixed(1));
                var_mu_pos.push(en_pasitive);
                var_mu_neg.push(en_negative);

                //Wind
                let w_positive;
                let w_negative;
                if (wind_var_mn < 0) {
                    w_negative = (wind_var_mn).toFixed(1);
                }
                else {
                    w_positive = (wind_var_mn).toFixed(1);
                }
                actual_wind.push(avg_act_wind_mn.toFixed(1));
                target_wind.push(avg_tar_wind_mn.toFixed(1));
                var_wind_pos.push(w_positive);
                var_wind_neg.push(w_negative);
                //plf
                let plf_positive;
                let plf_negative;
                if (plf_var_mn < 0) {
                    plf_negative = plf_var_mn.toFixed(1);
                }
                else {
                    plf_positive = plf_var_mn.toFixed(1);
                }
                //Push PLF Weekly
                actual_plf.push(avg_act_plf_mn.toFixed(1));
                target_plf.push(avg_tar_plf_mn.toFixed(1));
                var_plf_pos.push(plf_positive);
                var_plf_neg.push(plf_negative);
                //MA
                let ma_positive;
                let ma_negative;
                if (ma_var_mn < 0) {
                    ma_negative = ma_var_mn.toFixed(1);
                }
                else {
                    ma_positive = ma_var_mn.toFixed(1);
                }
                // Push Weekly MA
                actual_ma.push(avg_act_ma_mn.toFixed(1));
                target_ma.push(avg_tar_ma_mn.toFixed(1));
                var_ma_pos.push(ma_positive);
                var_ma_neg.push(ma_negative);
                //IGA
                let iga_positive;
                let iga_negative;
                if (iga_var_mn < 0) {
                    iga_negative = iga_var_mn.toFixed(1);
                }
                else {
                    iga_positive = iga_var_mn.toFixed(1);
                }
                // Push Weekly IGA
                actual_iga.push(avg_act_iga_mn.toFixed(1));
                target_iga.push(avg_tar_iga_mn.toFixed(1));
                var_iga_pos.push(iga_positive);
                var_iga_neg.push(iga_negative);
                //EGA Calculation

                let ega_positive;
                let ega_negative;
                if (ega_var_mn < 0) {
                    ega_negative = ega_var_mn.toFixed(1);
                }
                else {
                    ega_positive = ega_var_mn.toFixed(1);
                }
                // Push Weekly EGA
                actual_ega.push(avg_act_ega_mn.toFixed(1));
                target_ega.push(avg_tar_ega_mn.toFixed(1));
                var_ega_pos.push(ega_positive);
                var_ega_neg.push(ega_negative);
               // Calculation Energy MU Monthly
                /*tar_energy_mn = result[0].tar_kwh_mu/1000000;
                act_energy_mn = result[0].act_jmr_kwh_mu;
                energy_var_mn = (act_energy_mn - tar_energy_mn) / tar_energy_mn;
                 let en_pasitive;
                 let en_negative;
                if (energy_var_mn < 0) {
                    en_negative = (energy_var_mn*100).toFixed(1);
                 }
                 else {
                    en_pasitive = (energy_var_mn*100).toFixed(2);
                }
                diff_MUs_mn = (act_energy_mn - tar_energy_mn);
                Diff_Mus.push(diff_MUs_mn.toFixed(1));
                //let cal_revenue_mn = (act_energy_mn - tar_energy_mn) * result[0].total_tarrif;
               // revenue.push(result[0].revenue);
                 // Push Energy MU Monthly
                actual_mu.push(act_energy_mn.toFixed(1));
                target_mu.push(tar_energy_mn.toFixed(1));
                var_mu_pos.push(en_pasitive);
                var_mu_neg.push(en_negative);
                // Calcultioan wind Monthly
                 tar_wind_mn = result[0].tar_wind;
                 act_wind_mn = result[0].act_Wind;
                 wind_var_mn = (act_wind_mn - tar_wind_mn) / tar_wind_mn;
                 let w_positive;
                 let w_negative;
                if (wind_var_mn < 0) {
                    w_negative = (wind_var_mn*100).toFixed(1);
                 }
                 else {
                    w_positive = (wind_var_mn*100).toFixed(1);
                }
                // Push Wind Monthly
                actual_wind.push(act_wind_mn.toFixed(1));
                target_wind.push(tar_wind_mn.toFixed(1));
                var_wind_pos.push(w_positive);
                var_wind_neg.push(w_negative);
                // Calculation Monthly PLF
                 tar_plf_mn = result[0].tar_plf;
                 act_plf_mn = result[0].act_plf;
                 plf_var_mn = (act_plf_mn - tar_plf_mn);

                 let plf_positive;
                 let plf_negative;
                 if (plf_var_mn < 0) {
                     plf_negative = plf_var_mn.toFixed(1);
                 }
                 else {
                     plf_positive = plf_var_mn.toFixed(1);
                }
                // Push Monthly PLF
                actual_plf.push(act_plf_mn.toFixed(1));
                target_plf.push(tar_plf_mn.toFixed(1));
                var_plf_pos.push(plf_positive);
                var_plf_neg.push(plf_negative);
                // Calculation Monthly MA
                 tar_ma_mn = result[0].tar_ma;
                 act_ma_mn = result[0].act_ma;
                 ma_var_mn = (act_ma_mn - tar_ma_mn);
                 let ma_positive;
                 let ma_negative;
                 if (ma_var_mn < 0) {
                     ma_negative = ma_var_mn.toFixed(1);
                 }
                 else {
                     ma_positive = ma_var_mn.toFixed(1);
                 }
                // Push Monthly MA
                actual_ma.push(act_ma_mn.toFixed(1));
                target_ma.push(tar_ma_mn.toFixed(1));
                var_ma_pos.push(ma_positive);
                var_ma_neg.push(ma_negative);
                // Calculation Monthly IGA
                tar_iga_mn = result[0].tar_iga;
                 act_iga_mn = result[0].act_iga;
                 iga_var_mn = (act_iga_mn - tar_iga_mn);
                 let iga_positive;
                 let iga_negative;
                 if (iga_var_mn < 0) {
                     iga_negative = iga_var_mn.toFixed(1);
                 }
                 else {
                     iga_positive = iga_var_mn.toFixed(1);
                }
                //Push Monthly IGA
                actual_iga.push(act_iga_mn.toFixed(1));
                target_iga.push(tar_iga_mn.toFixed(1));
                var_iga_pos.push(iga_positive);
                var_iga_neg.push(iga_negative);
                //Calculation EGA
                 tar_ega_mn = result[0].tar_ega;
                 act_ega_mn = result[0].act_ega;
                 ega_var_mn = (act_ega_mn - tar_ega_mn);
                 let ega_positive;
                 let ega_negative;
                 if (ega_var_mn < 0) {
                     ega_negative = ega_var_mn.toFixed(1);
                 }
                 else {
                     ega_positive = ega_var_mn.toFixed(1);
                }
                //Push Monthly EGA Data
                actual_ega.push(act_ega_mn.toFixed(1));
                target_ega.push(tar_ega_mn.toFixed(1));
                var_ega_pos.push(ega_positive);
                var_ega_neg.push(ega_negative);*/

                GetOperationYearlyPR();  // Call function for get yearly data
            }
        });
    }
    function GetOperationYearlyPR() {

        var tar_energy_yr = 0;
        var act_energy_yr = 0;
        var energy_var_yr = 0
        var tar_wind_yr = 0;
        var act_wind_yr = 0;
        var wind_var_yr = 0;
        var tar_plf_yr = 0;
        var act_plf_yr = 0;
        var plf_var_yr = 0;
        var tar_ma_yr = 0;
        var act_ma_yr = 0;
        var ma_var_yr = 0;
        var tar_iga_yr = 0;
        var act_iga_yr = 0;
        var iga_var_yr = 0;
        var tar_ega_yr = 0;
        var act_ega_yr = 0;
        var ega_var_yr = 0;
        var total_revenue_yr = 0;
        var yr_energy = [];
        var diff_MUs_yr = 0;
        var total_capacity_yr = 0;
        var total_tarriff_yr = 0;
       // var daterange = $('#daterange').val();
       // var arr1 = new Array();
       // arr1 = daterange.split("-");

       // var toDate = moment(arr1[1], 'DD/MM/YYYY').format('YYYY-MM-DD');
        var fy = fyear;//$('select#fy option:selected').val();
        var daterange = $('#daterange').val();
        const dateArr = daterange.split("/");
        var toDate = `${dateArr[2]}-${dateArr[1]}-${dateArr[0]}`;
        var FyDate = getFinancialYearDate(fy);
        var FyDate1 = FyDate.startdate;
        const fydateArr = FyDate1.split("-");
        var fromDate = `${fydateArr[2]}-${fydateArr[1]}-${fydateArr[0]}`;
       var site_ids = "@Html.Raw(windSiteList.TrimEnd(','))";
        $.ajax({
            type: "GET",
            url: '@Url.Action("GetYearlyOperation", "WindReport")' + '?fy=' + fy + '&fromDate=' + fromDate + '&toDate=' + toDate + '&site=' + site_ids,
            //url: "/WindReport/GetMontlyOperation?fy=" + fy + "&fromDate=" + fromDate + "&toDate=" + toDate + "&site=" + site_ids,
            contentType: "application/json; charset=utf-8",
            datatype: "html",
            success: function (result, status, xhr) {

                for (var i = 0; i < result.length; i++) {

                    let tar_mu_yr = 0;
                    tar_energy_yr += result[i].tar_kwh_mu / 1000000;
                    total_capacity_yr += result[i].total_mw;
                    //tar_energy_wk += (result[i].tar_kwh_mu / 1000000) * result[i].total_mw;
                    act_energy_yr += result[i].act_jmr_kwh_mu;
                    total_tarriff_yr += result[i].total_tarrif;
                    //revenue = ((result[i].act_jmr_kwh_mu - tar_mu) * result[i].total_tarrif);
                    //total_revenue += revenue;
                    tar_wind_yr += result[i].tar_wind * result[i].total_mw;
                    act_wind_yr += result[i].act_Wind * result[i].total_mw;

                    tar_plf_yr += result[i].tar_plf * result[i].total_mw;
                    act_plf_yr += result[i].act_plf * result[i].total_mw;

                    tar_ma_yr += result[i].tar_ma * result[i].total_mw;
                    act_ma_yr += result[i].act_ma * result[i].total_mw;

                    tar_iga_yr += result[i].tar_iga * result[i].total_mw;
                    act_iga_yr += result[i].act_iga * result[i].total_mw;

                    tar_ega_yr += result[i].tar_ega * result[i].total_mw;
                    act_ega_yr += result[i].act_ega * result[i].total_mw;
                    total_revenue_yr += (result[i].act_jmr_kwh_mu - (result[i].tar_kwh_mu / 1000000)) * result[i].total_tarrif;
                }
                let avg_tar_mu_yr = 0;
                let avg_tar_wind_yr = 0;
                let avg_tar_plf_yr = 0;
                let avg_tar_ma_yr = 0;
                let avg_tar_iga_yr = 0;
                let avg_tar_ega_yr = 0;
                let avg_act_wind_yr = 0;
                let avg_act_plf_yr = 0;
                let avg_act_ma_yr = 0;
                let avg_act_iga_yr = 0;
                let avg_act_ega_yr = 0;
                if (total_capacity_yr != 0) {
                    //avg_tar_mu = tar_energy_wk / total_capacity;
                    avg_tar_wind_yr = tar_wind_yr / total_capacity_yr;
                    avg_act_wind_yr = act_wind_yr / total_capacity_yr;

                    avg_tar_plf_yr = tar_plf_yr / total_capacity_yr;
                    avg_act_plf_yr = act_plf_yr / total_capacity_yr;

                    avg_tar_ma_yr = tar_ma_yr / total_capacity_yr;
                    avg_act_ma_yr = act_ma_yr / total_capacity_yr;

                    avg_tar_iga_yr = tar_iga_yr / total_capacity_yr;
                    avg_act_iga_yr = act_iga_yr / total_capacity_yr;

                    avg_tar_ega_yr = tar_ega_yr / total_capacity_yr;
                    avg_act_ega_yr = act_ega_yr / total_capacity_yr;
                }
                if (tar_energy_yr != 0) {
                    energy_var_yr = (((act_energy_yr - tar_energy_yr) / tar_energy_yr) * 100);
                }
                if (avg_tar_wind_yr != 0) {
                    wind_var_yr = ((avg_act_wind_yr.toFixed(2) - avg_tar_wind_yr.toFixed(2)) / avg_tar_wind_yr.toFixed(2)) * 100;
                }
                
                revenue.push(total_revenue_yr);
                diff_MUs_yr = (act_energy_yr - tar_energy_yr);
                Diff_Mus.push(diff_MUs_yr.toFixed(1));
                plf_var_yr = (avg_act_plf_yr - avg_tar_plf_yr);
                ma_var_yr = (avg_act_ma_yr - avg_tar_ma_yr);
                iga_var_yr = (avg_act_iga_yr - avg_tar_iga_yr);
                ega_var_yr = (avg_act_ega_yr - avg_tar_ega_yr);

                // MU 

                let en_pasitive;
                let en_negative;
                if (energy_var_yr < 0) {
                    en_negative = (energy_var_yr).toFixed(1);
                }
                else {
                    en_pasitive = (energy_var_yr).toFixed(1);
                }
                actual_mu.push(act_energy_yr.toFixed(1));
                target_mu.push(tar_energy_yr.toFixed(1));
                var_mu_pos.push(en_pasitive);
                var_mu_neg.push(en_negative);

                //Wind
                let w_positive;
                let w_negative;
                if (wind_var_yr < 0) {
                    w_negative = (wind_var_yr).toFixed(1);
                }
                else {
                    w_positive = (wind_var_yr).toFixed(1);
                }
                actual_wind.push(avg_act_wind_yr.toFixed(1));
                target_wind.push(avg_tar_wind_yr.toFixed(1));
                var_wind_pos.push(w_positive);
                var_wind_neg.push(w_negative);
                //plf
                let plf_positive;
                let plf_negative;
                if (plf_var_yr < 0) {
                    plf_negative = plf_var_yr.toFixed(1);
                }
                else {
                    plf_positive = plf_var_yr.toFixed(1);
                }
                //Push PLF Weekly
                actual_plf.push(avg_act_plf_yr.toFixed(1));
                target_plf.push(avg_tar_plf_yr.toFixed(1));
                var_plf_pos.push(plf_positive);
                var_plf_neg.push(plf_negative);
                //MA
                let ma_positive;
                let ma_negative;
                if (ma_var_yr < 0) {
                    ma_negative = ma_var_yr.toFixed(1);
                }
                else {
                    ma_positive = ma_var_yr.toFixed(1);
                }
                // Push Weekly MA
                actual_ma.push(avg_act_ma_yr.toFixed(1));
                target_ma.push(avg_tar_ma_yr.toFixed(1));
                var_ma_pos.push(ma_positive);
                var_ma_neg.push(ma_negative);
                //IGA
                let iga_positive;
                let iga_negative;
                if (iga_var_yr < 0) {
                    iga_negative = iga_var_yr.toFixed(1);
                }
                else {
                    iga_positive = iga_var_yr.toFixed(1);
                }
                // Push Weekly IGA
                actual_iga.push(avg_act_iga_yr.toFixed(1));
                target_iga.push(avg_tar_iga_yr.toFixed(1));
                var_iga_pos.push(iga_positive);
                var_iga_neg.push(iga_negative);
                //EGA Calculation

                let ega_positive;
                let ega_negative;
                if (ega_var_yr < 0) {
                    ega_negative = ega_var_yr.toFixed(1);
                }
                else {
                    ega_positive = ega_var_yr.toFixed(1);
                }
                // Push Weekly EGA
                actual_ega.push(avg_act_ega_yr.toFixed(1));
                target_ega.push(avg_tar_ega_yr.toFixed(1));
                var_ega_pos.push(ega_positive);
                var_ega_neg.push(ega_negative);
                // Calcilation yearlyenergy
               /* tar_energy_yr = result[0].tar_kwh_mu/1000000;
                act_energy_yr = result[0].act_jmr_kwh_mu;
                energy_var_yr = (act_energy_yr - tar_energy_yr) / tar_energy_yr;
                 let en_pasitive;
                 let en_negative;
                if (energy_var_yr < 0) {
                    en_negative = (energy_var_yr * 100).toFixed(1);

                 }
                 else {
                    en_pasitive = (energy_var_yr * 100).toFixed(1);
                }

                //let cal_revenue_yr = (act_energy_yr - tar_energy_yr) * result[0].total_tarrif;
                diff_MUs_yr = (act_energy_yr - tar_energy_yr);
                Diff_Mus.push(diff_MUs_yr.toFixed(1));
               // revenue.push(result[0].revenue);
                // Push MU Yearly data
                actual_mu.push(act_energy_yr.toFixed(1));
                target_mu.push(tar_energy_yr.toFixed(1));
                var_mu_pos.push(en_pasitive);
                var_mu_neg.push(en_negative);

               // Calaculation yealy wind
                 tar_wind_yr = result[0].tar_wind;
                 act_wind_yr = result[0].act_Wind;
                 wind_var_yr = (act_wind_yr - tar_wind_yr) / tar_wind_yr;
                 let w_positive;
                 let w_negative;
                if (wind_var_yr < 0) {
                    w_negative = (wind_var_yr * 100).toFixed(1);
                 }
                 else {
                    w_positive = (wind_var_yr * 100).toFixed(1);
                }
                // Push wind Yearly data
                actual_wind.push(act_wind_yr.toFixed(1));
                target_wind.push(tar_wind_yr.toFixed(1));
                var_wind_pos.push(w_positive);
                var_wind_neg.push(w_negative);

                //calculation yearly plf
                tar_plf_yr = result[0].tar_plf;
                act_plf_yr = result[0].act_plf;
                plf_var_yr = (act_plf_yr - tar_plf_yr);
                let plf_positive;
                let plf_negative;
                if (plf_var_yr < 0) {
                    plf_negative = plf_var_yr.toFixed(1);
                 }
                 else {
                    plf_positive = plf_var_yr.toFixed(1);
                }
                // Push PLF Yearly data
                actual_plf.push(act_plf_yr.toFixed(1));
                target_plf.push(tar_plf_yr.toFixed(1));
                var_plf_pos.push(plf_positive);
                var_plf_neg.push(plf_negative);
                // calculation yearl ma
                 tar_ma_yr = result[0].tar_ma;
                 act_ma_yr = result[0].act_ma;
                 ma_var_yr = (act_ma_yr - tar_ma_yr);
                 let ma_positive;
                 let ma_negative;
                 if (ma_var_yr < 0) {
                     ma_negative = ma_var_yr.toFixed(1);
                 }
                 else {
                     ma_positive = ma_var_yr.toFixed(1);
                }
                // Push MA Yearly data
                actual_ma.push(act_ma_yr.toFixed(1));
                target_ma.push(tar_ma_yr.toFixed(1));
                var_ma_pos.push(ma_positive);
                var_ma_neg.push(ma_negative);
                // calculation yearly iga
                tar_iga_yr = result[0].tar_iga;
                 act_iga_yr = result[0].act_iga;
                 iga_var_yr = (act_iga_yr - tar_iga_yr);
                 let iga_positive;
                 let iga_negative;
                 if (iga_var_yr < 0) {
                     iga_negative = iga_var_yr.toFixed(1);
                 }
                 else {
                     iga_positive = iga_var_yr.toFixed(1);
                }
                // Push IGA Yearly data
                actual_iga.push(act_iga_yr.toFixed(1));
                target_iga.push(tar_iga_yr.toFixed(1));
                var_iga_pos.push(iga_positive);
                var_iga_neg.push(iga_negative);
                // calcultion yearly ega
                 tar_ega_yr = result[0].tar_ega;
                 act_ega_yr = result[0].act_ega;
                 ega_var_yr = (act_ega_yr - tar_ega_yr);
                 let ega_positive;
                 let ega_negative;
                 if (ega_var_yr < 0) {
                     ega_negative = ega_var_yr.toFixed(1);
                 }
                 else {
                     ega_positive = ega_var_yr.toFixed(1);
                }
                // Push EGA Yearly data
                actual_ega.push(act_ega_yr.toFixed(1));
                target_ega.push(tar_ega_yr.toFixed(1));
                var_ega_pos.push(ega_positive);
                var_ega_neg.push(ega_negative);*/

                // Call Cahrd Functions
                chartEnergyMU(actual_mu, target_mu, var_mu_pos, var_mu_neg);
                chartWindSpeed(actual_wind, target_wind, var_wind_pos, var_wind_neg);
                PLF_chart(actual_plf, target_plf, var_plf_pos, var_plf_neg);
                MA_chart(actual_ma, target_ma, var_ma_pos, var_ma_neg);
                IGA_chart(actual_iga, target_iga, var_iga_pos, var_iga_neg);
                EGA_chart(actual_ega, target_ega, var_ega_pos, var_ega_neg);
                //console.log("Revenue" + revenue);
                OperationalTable(Diff_Mus, revenue);
            }
        });

    }
    function OperationalTable(Diff_Mus, revenue) {
        var wind_side = "@Html.Raw(windSiteList.TrimEnd(','))";
        const site_array = wind_side.split(",");
        //var daterange = $('#daterange').val();
       // var arr1 = new Array();
        //arr1 = daterange.split("-");
        //var fromDate = moment(arr1[0], 'DD/MM/YYYY').format('DD-MMM-YYYY');
        //var toDate = moment(arr1[1], 'DD/MM/YYYY').format('DD-MMM-YYYY');
         $.ajax({
            type: "GET",
           // url: "/WindReport/GetSPVList?state=" + val,
             url: '@Url.Action("GetOperationHeadData", "WindReport")' + '?site=' + wind_side,
            contentType: "application/json; charset=utf-8",
            //data: '{"state":"' + val + '"}',
             datatype: "html",

             success: function (result, status, xhr) {
                 var sec1 = "";
                 var sec2 = "";
                 var sec3 = "";
                 sec1 += '<p>&nbsp</p><h4 class="dark-blue" style="font-weight: bold;">HFE Operational Performance</h4>';
                 //sec1 += '<p class="dark-blue" style="font-weight: bold;">(' + fromDate + ' to ' + toDate + ')</p>';

                 sec2 += '<table class="table table-bordered table-striped">';
                 sec2 += '<thead class="tbl-head"><tr>';
                 sec2 += '<th colspan="2"></th></tr><thead>';
                 sec2 += '<tr><td>Portfolio</td><td style="text-align: right;">' + site_array.length + '</td></tr>';
                 sec2 += '<tr><td>SPVs</td><td style="text-align: right;">' + result[0].spv_count + '</td></tr>';
                 sec2 += '<tr><td>Capacity (in MW)</td><td style="text-align: right;">' + result[0].capacity.toFixed(0) + '</td></tr>';
                 sec2 += '</table>';


                 sec3 += '<table class="table table-bordered table-striped" style="line-height: 15px;">';
                 sec3 += '<thead class="tbl-head"><tr>';
                 sec3 += '<th>Period</th><th>Energy Gain/Loss (MUs)	</th><th>Revenue(MINR)</th></tr ></thead> ';
                 sec3 += '<tr><td>WK</td><td style="text-align: right;">' + Diff_Mus[0] + '</td><td style="text-align: right;">' + revenue[0].toFixed(1) + '</td></tr>';
                 sec3 += '<tr><td>MTD</td><td style="text-align: right;">' + Diff_Mus[1] + '</td><td style="text-align: right;">' + revenue[1].toFixed(1) + '</td></tr>';
                 sec3 += '<tr><td>YTD</td><td style="text-align: right;">' + Diff_Mus[2] + '</td><td style="text-align: right;">' + revenue[2].toFixed(1) + '</td></tr></table>';

                 $("#wk_head_sec1").html(sec1);
                 $("#wk_head_sec2").html(sec2);
                 $("#wk_head_sec3").html(sec3);

                 //document.getElementById('spv_counts').innerHTML = result[0].spv_count;
                //document.getElementById('capacity').innerHTML = result[0].capacity.toFixed(0);

             }

         });

        //document.getElementById('portfolio').innerHTML = site_array.length;
        document.getElementById('wk_head').style.display = 'flex';
        GetPerformanceBySPV();
        GetPerformanceBySite();
    }
    function chartEnergyMU(actual_mu, target_mu, var_mu_pos, var_mu_neg) {
        let chartStatus = Chart.getChart("energy_mu_chart"); // <canvas> id
        if (chartStatus != undefined) {
            chartStatus.destroy();
        }
        new Chart(document.getElementById("energy_mu_chart"), {
            type: 'bar',
            data: {
                labels: ["WK","MTD","YTD"],
                datasets: [{
                    yAxisID: 'en',
                    label: "Target",
                    type: "bar",
                    borderColor: "#77CAE7",
                    backgroundColor: "#77CAE7",
                    data: target_mu,
                    order: 1,
                    datalabels: {
                        anchor: 'center',
                        align: 'top',
                        color: 'white',
                        labels: {
                            title: {
                                font: {
                                    weight: 'bold'

                                }
                            },
                        },
                    },
                },{
                    yAxisID: 'en',
                    label: "Actual",
                    type: "bar",
                    borderColor: "#31576D",
                    backgroundColor: "#31576D",
                    data: actual_mu,
                    order: 1,
                    datalabels: {
                        anchor: 'center',
                        align: 'top',
                        color: 'white',
                        labels: {
                            title: {
                                font: {
                                    weight: 'bold'

                                }
                            },
                        },
                    },
                },{
                    yAxisID: 'en_var',
                    label: "(-ve) %",
                    type: "bubble",
                    backgroundColor: "#EE403D",
                    borderColor: "#EE403D",
                    data: var_mu_neg,
                    fill: false,
                    order: 0,
                    datalabels: {
                        anchor: 'end',
                        align: 'top',
                    },
                },{
                    yAxisID: 'en_var',
                    label: "(+ve) %",
                    type: "bubble",
                    backgroundColor: "#86C466",
                    borderColor: "#86C466",
                    backgroundColorHover: "#3e95cd",
                    data: var_mu_pos,
                    fill: false,
                    order: 0,
                    datalabels: {
                        anchor: 'end',
                        align: 'top',
                        offset: 5
                    },

                }]
            },
            plugins: [ChartDataLabels],
            options: {
                responsive: true,
                plugins: {
                    title: {
                        display: true,
                        text: "Energy(MUs)"
                    },
                    legend: {
                        display: true,
                        position: "bottom"
                    }
                },
                scales: {
                    en: {
                        type: 'linear',
                        position: 'left',
                        grid: { display: false }
                    },
                    en_var: {
                        type: 'linear',
                        position: 'right',
                        ticks: {
                            display: false,
                        },
                        //ticks: { beginAtZero: true, },
                        grid: { display: false }
                    },
                }
            }

        });
    }
    //Wind Spped Chart
    function chartWindSpeed(actual_wind, target_wind, var_wind_pos, var_wind_neg) {
        let chartStatus = Chart.getChart("wind_sp_chart"); // <canvas> id
        if (chartStatus != undefined) {
            chartStatus.destroy();
        }
        new Chart(document.getElementById("wind_sp_chart"), {
            type: 'bar',
            data: {
                labels: ["WK", "MTD", "YTD"],
                datasets: [{
                    yAxisID: 'w_en',
                    label: "Target",
                    type: "bar",
                    borderColor: "#77CAE7",
                    backgroundColor: "#77CAE7",
                    data: target_wind,
                    order: 1,
                    datalabels: {
                        anchor: 'center',
                        align: 'top',
                        color: 'white',
                        labels: {
                            title: {
                                font: {
                                    weight: 'bold'

                                }
                            },
                        },
                    },

                },{
                    yAxisID: 'w_en',
                    label: "Actual",
                    type: "bar",
                    borderColor: "#31576D",
                    backgroundColor: "#31576D",
                    data: actual_wind,
                    order: 1,
                    datalabels: {
                        anchor: 'center',
                        align: 'top',
                        color: 'white',
                        labels: {
                            title: {
                                font: {
                                    weight: 'bold'

                                }
                            },
                        },
                    },
                },{
                    yAxisID: 'w_var',
                    label: "(-ve) %",
                    type: "bubble",
                    backgroundColor: "#EE403D",
                    borderColor: "#EE403D",
                    data: var_wind_neg,
                    order: 0,
                    fill: false,
                    datalabels: {
                        anchor: 'end',
                        align: 'top',
                        //offset: 5
                    },
                },{
                    yAxisID: 'w_var',
                    label: "(+ve) %",
                    type: "bubble",
                    backgroundColor: "#86C466",
                    borderColor: "#86C466",
                    backgroundColorHover: "#3e95cd",
                    data: var_wind_pos,
                    order: 0,
                    fill: false,
                    datalabels: {
                    anchor: 'end',
                        align: 'top',
                        offset: 5
                    },
                }]
            },
            plugins: [ChartDataLabels],
            options: {
                responsive: true,
                plugins: {
                    title: {
                        display: true,
                        text: "Wind (m/s)"
                    },
                    legend: {
                        display: true,
                        position: 'bottom'
                    }
                },
                scales: {
                    w_en: {
                        type: 'linear',
                        position: 'left',
                        grid: { display: false }
                    },
                    w_var: {
                        type: 'linear',
                        position: 'right',
                        //ticks: { beginAtZero: true, },
                        ticks: {
                            display: false,
                        },
                        grid: { display: false }
                    },
                }
            }

        });
    }

    //PLF Chart
    function PLF_chart(actual_plf, target_plf, var_plf_pos, var_plf_neg) {
        let chartStatus = Chart.getChart("plf_chart"); // <canvas> id
        if (chartStatus != undefined) {
            chartStatus.destroy();
        }
        new Chart(document.getElementById("plf_chart"), {
            type: 'bar',
            data: {
                labels: ["WK", "MTD", "YTD"],
                datasets: [{
                    yAxisID: 'plf_en',
                    label: "Target",
                    type: "bar",
                    borderColor: "#77CAE7",
                    backgroundColor: "#77CAE7",
                    data: target_plf,
                    order: 1,
                    datalabels: {
                        anchor: 'center',
                        align: 'top',
                        color: 'white',
                        labels: {
                            title: {
                                font: {
                                    weight: 'bold'

                                }
                            },
                        },
                    },
                },{
                    yAxisID: 'plf_en',
                    label: "Actual",
                    type: "bar",
                    borderColor: "#31576D",
                    backgroundColor: "#31576D",
                    data: actual_plf,
                    order: 1,
                    datalabels: {
                        anchor: 'center',
                        align: 'top',
                        color: 'white',
                        labels: {
                            title: {
                                font: {
                                    weight: 'bold'

                                }
                            },
                        },
                    },
                },{
                    yAxisID: 'plf_var',
                    label: "(-ve) %",
                    type: "bubble",
                    backgroundColor: "#EE403D",
                    borderColor: "#EE403D",
                    data: var_plf_neg,
                    order: 0,
                    fill: false,
                    datalabels: {
                        anchor: 'end',
                        align: 'top'
                    },
                },{
                    yAxisID: 'plf_var',
                    label: "(+ve) %",
                    type: "bubble",
                    backgroundColor: "#86C466",
                    borderColor: "#86C466",
                    backgroundColorHover: "#3e95cd",
                    data: var_plf_pos,
                    order: 0,
                    fill: false,
                    datalabels: {
                        anchor: 'end',
                        align: 'top',
                        offset: 5
                    },
                }]
            },
            plugins: [ChartDataLabels],
            options: {
                responsive: true,
                plugins: {
                    title: {
                        display: true,
                        text: "PLF (%)"
                    },
                    legend: {
                        display: true,
                        position: "bottom"
                    }
                },
                scales: {
                    plf_en: {
                        type: 'linear',
                        position: 'left',
                        grid: { display: false }
                    },
                    plf_var: {
                        type: 'linear',
                        position: 'right',
                        //ticks: { beginAtZero: true, },
                        ticks: {
                            display: false,
                        },
                        grid: { display: false }
                    },
                }
            }

        });
    }
    //MA  Chart
    function MA_chart(actual_ma, target_ma, var_ma_pos, var_ma_neg) {
        let chartStatus = Chart.getChart("ma_chart"); // <canvas> id
        if (chartStatus != undefined) {
            chartStatus.destroy();
        }
        new Chart(document.getElementById("ma_chart"), {
            type: 'bar',
            data: {
                labels: ["WK", "MTD", "YTD"],
                datasets: [{
                    yAxisID: 'ma_en',
                    label: "Target",
                    type: "bar",
                    borderColor: "#77CAE7",
                    backgroundColor: "#77CAE7",
                    data: target_ma,
                    order:1 ,
                    datalabels: {
                        anchor: 'center',
                        align: 'top',
                        color: 'white',
                        labels: {
                            title: {
                                font: {
                                    weight: 'bold'

                                }
                            },
                        },
                    },
                },{
                    yAxisID: 'ma_en',
                    label: "Actual",
                    type: "bar",
                    borderColor: "#31576D",
                    backgroundColor: "#31576D",
                    data: actual_ma,
                    order: 1,
                        datalabels: {
                            anchor: 'center',
                            align: 'top',
                            color: 'white',
                            labels: {
                                title: {
                                    font: {
                                        weight: 'bold'

                                    }
                                },
                            },
                        },
                },{
                    yAxisID: 'ma_var',
                    label: "(-ve) %",
                    type: "bubble",
                    backgroundColor: "#EE403D",
                    borderColor: "#EE403D",
                    data: var_ma_neg,
                    order: 0,
                    fill: false,
                    datalabels: {
                        anchor: 'end',
                        align: 'top',
                    },
                },{
                    yAxisID: 'ma_var',
                    label: "(+ve) %",
                    type: "bubble",
                    backgroundColor: "#86C466",
                    borderColor: "#86C466",
                    backgroundColorHover: "#3e95cd",
                    data: var_ma_pos,
                    order: 0,
                    fill: false,
                    datalabels: {
                        anchor: 'end',
                        align: 'top',
                        offset: 5
                    },
                }]
            },
            plugins: [ChartDataLabels],
            options: {
                responsive: true,
                plugins: {
                    title: {
                        display: true,
                        text: "MA (%)"
                    },
                    legend: {
                        display: true,
                        position: "bottom"
                    }
                },
                scales: {
                    ma_en: {
                        type: 'linear',
                        position: 'left',
                        grid: { display: false }
                    },
                    ma_var: {
                        type: 'linear',
                        position: 'right',
                        //ticks: { beginAtZero: true, },
                        ticks: {
                            display: false,
                        },
                        grid: { display: false }
                    },
                }
            }

        });
    }
    //IGA  Chart
    function IGA_chart(actual_iga, target_iga, var_iga_pos, var_iga_neg) {
        let chartStatus = Chart.getChart("iga_chart"); // <canvas> id
        if (chartStatus != undefined) {
            chartStatus.destroy();
        }
        new Chart(document.getElementById("iga_chart"), {
            type: 'bar',
            data: {
                labels: ["WK", "MTD", "YTD"],
                datasets: [{
                    yAxisID: 'iga_en',
                    label: "Target",
                    type: "bar",
                    borderColor: "#77CAE7",
                    backgroundColor: "#77CAE7",
                    data: target_iga,
                    order: 1,
                    datalabels: {
                        anchor: 'center',
                        align: 'top',
                        color: 'white',
                        labels: {
                            title: {
                                font: {
                                    weight: 'bold'

                                }
                            },
                        },
                    },
                },{
                    yAxisID: 'iga_en',
                    label: "Actual",
                    type: "bar",
                    borderColor: "#31576D",
                    backgroundColor: "#31576D",
                    data: actual_iga,
                    order: 1,
                    datalabels: {
                        anchor: 'center',
                        align: 'top',
                        color: 'white',
                        labels: {
                            title: {
                                font: {
                                    weight: 'bold'

                                }
                            },
                        },
                        },
                },{
                    yAxisID: 'iga_var',
                    label: "(-ve) %",
                    type: "bubble",
                    backgroundColor: "#EE403D",
                    borderColor: "#EE403D",
                    data: var_iga_neg,
                    order: 0,
                    fill: false,
                    datalabels: {
                        anchor: 'end',
                        align: 'top'
                    },
                },{
                    yAxisID: 'iga_var',
                    label: "(+ve) %",
                    type: "bubble",
                    backgroundColor: "#86C466",
                    borderColor: "#86C466",
                    backgroundColorHover: "#3e95cd",
                    data: var_iga_pos,
                    order: 0,
                    fill: false,
                    datalabels: {
                        anchor: 'end',
                        align: 'top',
                        offset: 5
                    },
                }]
            },
            plugins: [ChartDataLabels],
            options: {
                responsive: true,
                plugins: {
                    title: {
                        display: true,
                        text: "IGA (%)"
                    },
                    legend: {
                        display: true,
                        position: "bottom"
                    }
                },
                scales: {
                    iga_en: {
                        type: 'linear',
                        position: 'left',
                        grid: { display: false }
                    },
                    iga_var: {
                        type: 'linear',
                        position: 'right',
                        //ticks: { beginAtZero: true, },
                        ticks: {
                            display: false,
                        },
                        grid: { display: false }
                    },
                }
            }

        });
    }
    //EGA  Chart
    function EGA_chart(actual_ega, target_ega, var_ega_pos, var_ega_neg) {
        let chartStatus = Chart.getChart("ega_chart"); // <canvas> id
        if (chartStatus != undefined) {
            chartStatus.destroy();
        }
        new Chart(document.getElementById("ega_chart"), {
            type: 'bar',
            data: {
                labels: ["WK", "MTD", "YTD"],
                datasets: [{
                    yAxisID: 'ega_en',
                    label: "Target",
                    type: "bar",
                    borderColor: "#77CAE7",
                    backgroundColor: "#77CAE7",
                    data: target_ega,
                    order: 1,
                    datalabels: {
                        anchor: 'center',
                        align: 'top',
                        color: 'white',
                        labels: {
                            title: {
                                font: {
                                    weight: 'bold'

                                }
                            },
                        },
                    },
                },{

                    yAxisID: 'ega_en',
                    label: "Actual",
                    type: "bar",
                    borderColor: "#31576D",
                    backgroundColor: "#31576D",
                    data: actual_ega,
                    order: 1,
                    datalabels: {
                        anchor: 'center',
                        align: 'top',
                        color: 'white',
                        labels: {
                            title: {
                                font: {
                                    weight: 'bold'

                                }
                            },
                        },
                    },
                },{
                    yAxisID: 'ega_var',
                    label: "(-ve) %",
                    type: "bubble",
                    backgroundColor: "#EE403D",
                    borderColor: "#EE403D",
                    data: var_ega_neg,
                    order: 0,
                    fill: false,
                    datalabels: {
                        anchor: 'end',
                        align: 'top',
                        offset: 5
                    },
                },{
                    yAxisID: 'ega_var',
                    label: "(+ve) %",
                    type: "bubble",
                    backgroundColor: "#86C466",
                    borderColor: "#86C466",
                    backgroundColorHover: "#3e95cd",
                    data: var_ega_pos,
                    order: 0,
                    fill: false,
                    datalabels: {
                        anchor: 'end',
                        align: 'top',
                        offset: 5
                    },
                }]
            },
            plugins: [ChartDataLabels],
            options: {
                responsive: true,
                plugins: {
                    title: {
                        display: true,
                        text: "EGA (%)"
                    },
                    legend: {
                        display: true,
                        position: "bottom"
                    }
                },
                scales: {
                    ega_en: {
                        type: 'linear',
                        position: 'left',
                        grid: { display: false }
                    },
                    ega_var: {
                        type: 'linear',
                        position: 'right',
                        //ticks: { beginAtZero: true, },
                        ticks: {
                            display: false,
                        },
                        grid: { display: false }
                    },
                }
            }

        });
    }
   // -----------------------------------Weekly ---------------------//
    /*function WeeklyPRReport() {

        var ReportType = $("input[name='weekly']:checked").val();
        if (ReportType == "SPV") {

            GetPerformanceBySPV();
        }
        else {
            //alert("SIte");
            GetPerformanceBySite();
        }
    }*/

    // Mothly Report WTG Wise
    function GetPerformanceBySPV() {

        var daterange = $('#daterange').val();
        const dateArr = daterange.split("/");
        var seldate = new Date(dateArr[2], dateArr[1] - 1, dateArr[0]);
        var fromDate = GetWeeklyDays(seldate);
        var toDate = `${dateArr[2]}-${dateArr[1]}-${dateArr[0]}`;
        var fyear1 = fyear;//$('select#fy option:selected').val();
        var site_ids = "@Html.Raw(windSiteList.TrimEnd(','))";

        var leble = [];
        var revenue_arr = [];
        var reporthead = "SPV Wise Reports";
        $.ajax({
            type: "GET",
            url: '@Url.Action("GetWindPRReportSPVWise", "WindReport")' + '?fy=' + fyear1 + '&fromDate=' + fromDate + '&toDate=' + toDate + '&sitelist=' + site_ids,
            //url: "/WindReport/GetWindPRReportSPVWise?fy=" + fyear + " &fromDate=" + fromDate + "&toDate=" + toDate,
            contentType: "application/json; charset=utf-8",

            datatype: "JSON",
            success: function (result, status, xhr) {
                console.log(result);
                //var tbl = '<div class="text-center"><h5>' + reporthead+'</h5></div>';
                var tbl= '<table id="example1"  class="table table-bordered table-striped" style="width:150%">';
                tbl += '<thead class="tbl-head"><tr>';
                tbl += '<th rowspan="2">SPV</th><th rowspan="2">Capacity<br>(MW)</th>';
                tbl += '<th colspan="3" class="text-center">JMR Energy (in MU)</th><th>Revenue</th>';
                tbl += '<th colspan="3" class="text-center">Wind Speed (m/s)</th><th colspan="3" class="text-center">PLF</th>';
                tbl += '<th colspan="3" class="text-center">MA (Actual)</th><th colspan="3" class="text-center">IGA</th>';
                tbl += '<th colspan="3" class="text-center">EGA</th></tr>';
                //tbl += '<tr><th>&nbsp;</th>';
               // tbl += '<th>(MW)</th>';
                tbl += '<tr><th>Tar</th>';
                tbl += '<th>Act</th>';
                tbl += '<th>Var (%)</th>';
                tbl += '<th>(MINR)</th>';
                tbl += '<th>Tar</th>';
                tbl += '<th>Act</th>';
                tbl += '<th>Var (%)</th>';
                tbl += '<th>Tar</th>';
                tbl += '<th>Act</th>';
                tbl += '<th>Var (%)</th>';
                tbl += '<th>Tar</th>';
                tbl += '<th>Act</th>';
                tbl += '<th>Var (%)</th>';
                tbl += '<th>Tar</th>';
                tbl += '<th>Act</th>';
                tbl += '<th>Var (%)</th>';
                tbl += '<th>Tar</th>';
                tbl += '<th>Act</th>';
                tbl += '<th>Var (%)</th>';

                tbl += '</tr></thead>';

                if (result.length > 0) {
                    console.log("Datatable");
			let total_capacity = 0;
                    let total_capTarMu = 0;
                    let total_tar_kwh_mu = 0;
                    let total_act_jmr_kwh_mu = 0;
                    let avg_jmr_var = 0;
                    let total_revenue = 0;
                    let total_capTarWind = 0;
                    let total_tar_wind = 0;
                    let total_act_wind = 0;
                    let avg_wind_var = 0;
                    let total_capTarPlf = 0;
                    let total_tar_plf = 0;
                    let total_act_plf = 0;
                    let avg_plf_var = 0;
                    let total_capTarMa = 0;
                    let total_tar_ma = 0;
                    let total_act_ma = 0;
                    let avg_ma_var = 0;
                    let total_capTarIga = 0;
                    let total_tar_iga = 0;
                    let total_act_iga = 0;
                    let avg_iga_var = 0;
                    let total_capTarEga = 0;
                    let total_tar_ega = 0;
                    let total_act_ega = 0;
                    let avg_ega_var = 0;
                    let total_capActWind = 0;
                    let total_capActPlf = 0;
                    let total_capActMa = 0;
                    let total_capActIga = 0;
                    let total_capActEga = 0;

                    for (var i = 0; i < result.length; i++) {
                        leble.push(result[i].spv);
                        let revenue = 0;
                        let jmr_var = 0;
                        let wind_var = 0;
                        let plf_var = 0;
                        let ma_act_var = 0;
                        let iga_var = 0;
                        let ega_var = 0;
                        let tar_mu = 0;
                        tar_mu = result[i].tar_kwh_mu / 1000000;
                        //tar_mu = result[i].tar_kwh_mu / 1000000;
                        //revenue = ((result[i].act_jmr_kwh_mu - tar_mu) * result[i].total_tarrif);
                        revenue = ((result[i].act_jmr_kwh_mu - tar_mu) * result[i].total_tarrif);
                        if (result[i].act_jmr_kwh_mu != 0 || result[i].tar_kwh_mu != 0) {
                            jmr_var = ((result[i].act_jmr_kwh_mu - tar_mu) / tar_mu) * 100;
                        }
                        if (result[i].act_Wind != 0 || result[i].tar_wind != 0) {
                            wind_var = ((result[i].act_Wind.toFixed(2) - result[i].tar_wind.toFixed(2)) / result[i].tar_wind.toFixed(2)) * 100;
                        }

                        plf_var = (result[i].act_plf - result[i].tar_plf);
                        ma_act_var = (result[i].act_ma - result[i].tar_ma);
                        iga_var = (result[i].act_iga - result[i].tar_iga);
                        ega_var = (result[i].act_ega - result[i].tar_ega);


                        revenue_arr.push(revenue.toFixed(1));
			            total_capacity += result[i].total_mw;
                        total_tar_kwh_mu += (result[i].tar_kwh_mu / 1000000);
                        total_act_jmr_kwh_mu += result[i].act_jmr_kwh_mu;
                        total_revenue += revenue;
                        total_tar_wind += result[i].tar_wind;
                        total_act_wind += result[i].act_Wind;
                        total_tar_plf += result[i].tar_plf;
                        total_act_plf += result[i].act_plf;
                        total_tar_ma += result[i].tar_ma;
                        total_act_ma += result[i].act_ma;
                        total_tar_iga += result[i].tar_iga;
                        total_act_iga += result[i].act_iga;
                        total_tar_ega += result[i].tar_ega;
                        total_act_ega += result[i].act_ega;
                        total_capTarMu += result[i].tar_kwh_mu * result[i].total_mw;
                        total_capTarWind += result[i].tar_wind * result[i].total_mw;
                        total_capTarPlf += result[i].tar_plf * result[i].total_mw;
                        total_capTarMa += result[i].tar_ma * result[i].total_mw;
                        total_capTarIga += result[i].tar_iga * result[i].total_mw;
                        total_capTarEga += result[i].tar_ega * result[i].total_mw;
                        total_capActWind += result[i].act_Wind * result[i].total_mw;
                        total_capActPlf += result[i].act_plf * result[i].total_mw;
                        total_capActMa += result[i].act_ma * result[i].total_mw;
                        total_capActIga += result[i].act_iga * result[i].total_mw;
                        total_capActEga += result[i].act_ega * result[i].total_mw;

                        tbl += '<tr>';
                        tbl += '<td class="text-left">' + result[i].spv + '</td>';
                        tbl += '<td class="text-right">' + result[i].total_mw.toFixed(2) + '</td>';
                        tbl += '<td class="text-right">' + (result[i].tar_kwh_mu/1000000).toFixed(2)+'</td>';
                        tbl += '<td class="text-right">' + result[i].act_jmr_kwh_mu.toFixed(2) + '</td>';
                        tbl += '<td class="text-right">' + jmr_var.toFixed(2)+'</td>';
                        tbl += '<td class="text-right">' + revenue.toFixed(2)+'</td>';
                        tbl += '<td class="text-right">' + result[i].tar_wind.toFixed(2) + '</td>';
                        tbl += '<td class="text-right">' + result[i].act_Wind.toFixed(2) + '</td>';
                        tbl += '<td class="text-right">' + wind_var.toFixed(2)+'</td>';
                        tbl += '<td class="text-right">' + result[i].tar_plf.toFixed(2) + '</td>';
                        tbl += '<td class="text-right">' + result[i].act_plf.toFixed(2) + '</td>';
                        tbl += '<td class="text-right">' + plf_var.toFixed(2)+'</td>';
                        tbl += '<td class="text-right">' + result[i].tar_ma.toFixed(2) + '</td>';
                        tbl += '<td class="text-right">' + result[i].act_ma.toFixed(2) + '</td>';
                        tbl += '<td class="text-right">' + ma_act_var.toFixed(2)+'</td>';
                        tbl += '<td class="text-right">' + result[i].tar_iga.toFixed(2) + '</td>';
                        tbl += '<td class="text-right">' + result[i].act_iga.toFixed(2) + '</td>';
                        tbl += '<td class="text-right">' + iga_var.toFixed(2)+'</td>';
                        tbl += '<td class="text-right">' + result[i].tar_ega.toFixed(2) + '</td>';
                        tbl += '<td class="text-right">' + result[i].act_ega.toFixed(2) + '</td>';
                        tbl += '<td class="text-right">' + ega_var.toFixed(2)+'</td>';
                        tbl += '</tr>';
                    }
                    let avg_tar_mu = 0;
                    let avg_tar_wind = 0;
                    let avg_tar_plf = 0;
                    let avg_tar_ma = 0;
                    let avg_tar_iga = 0;
                    let avg_tar_ega = 0;
                    let avg_act_wind = 0;
                    let avg_act_plf = 0;
                    let avg_act_ma = 0;
                    let avg_act_iga = 0;
                    let avg_act_ega = 0;


                    if (total_capacity != 0) {
                        avg_tar_mu = total_capTarMu / total_capacity;
                        avg_tar_wind = total_capTarWind / total_capacity;
                        avg_tar_plf = total_capTarPlf / total_capacity;
                        avg_tar_ma = total_capTarMa / total_capacity;
                        avg_tar_iga = total_capTarIga / total_capacity;
                        avg_tar_ega = total_capTarEga / total_capacity;
                        avg_act_wind = total_capActWind / total_capacity;
                        avg_act_plf = total_capActPlf / total_capacity;
                        avg_act_ma = total_capActMa / total_capacity;
                        avg_act_iga = total_capActIga / total_capacity;
                        avg_act_ega = total_capActEga / total_capacity;
                    }
                    if (total_tar_kwh_mu != 0) {
                        avg_jmr_var = (((total_act_jmr_kwh_mu - total_tar_kwh_mu) / total_tar_kwh_mu) * 100);
                    }
                    if (avg_tar_wind != 0) {
                        avg_wind_var = ((avg_act_wind.toFixed(2) - avg_tar_wind.toFixed(2)) / avg_tar_wind.toFixed(2)) * 100;
                    }
                    avg_plf_var = (avg_act_plf - avg_tar_plf);
                    avg_ma_var = (avg_act_ma - avg_tar_ma);
                    avg_iga_var = (avg_act_iga - avg_tar_iga);
                    avg_ega_var = (avg_act_ega - avg_tar_ega);

                    tbl += '<tfoot><tr>';
                    tbl += '<th rowspan="1"  style="width: 10%;"><b>Grand Total</b></th>';
                    tbl += '<td class="text-right"><b>' + total_capacity.toFixed(2) + '</b></td>';
                    tbl += '<td class="text-right"><b>' + total_tar_kwh_mu.toFixed(2) + '</b></td>';
                    tbl += '<td class="text-right"><b>' + total_act_jmr_kwh_mu.toFixed(2) + '</b></td>';
                    tbl += '<td class="text-right"><b>' + avg_jmr_var.toFixed(2) + '</b></td>';
                    tbl += '<td class="text-right"><b>' + total_revenue.toFixed(2) + '</b></td>';
                    tbl += '<td class="text-right"><b>' + avg_tar_wind.toFixed(2) + '</b></td>';
                    tbl += '<td class="text-right"><b>' + avg_act_wind.toFixed(2) + '</b></td>';
                    tbl += '<td class="text-right"><b>' + avg_wind_var.toFixed(2) + '</b></td>';
                    tbl += '<td class="text-right"><b>' + avg_tar_plf.toFixed(2) + '</b></td>';
                    tbl += '<td class="text-right"><b>' + avg_act_plf.toFixed(2) + '</b></td>';
                    tbl += '<td class="text-right"><b>' + avg_plf_var.toFixed(2) + '</b></td>';
                    tbl += '<td class="text-right"><b>' + avg_tar_ma.toFixed(2) + '</b></td>';
                    tbl += '<td class="text-right"><b>' + avg_act_ma.toFixed(2) + '</b></td>';
                    tbl += '<td class="text-right"><b>' + avg_ma_var.toFixed(2) + '</b></td>';
                    tbl += '<td class="text-right"><b>' + avg_tar_iga.toFixed(2) + '</b></td>';
                    tbl += '<td class="text-right"><b>' + avg_act_iga.toFixed(2) + '</b></td>';
                    tbl += '<td class="text-right"><b>' + avg_iga_var.toFixed(2) + '</b></td>';
                    tbl += '<td class="text-right"><b>' + avg_tar_ega.toFixed(2) + '</b></td>';
                    tbl += '<td class="text-right"><b>' + avg_act_ega.toFixed(2) + '</b></td>';
                    tbl += '<td class="text-right"><b>' + avg_ega_var.toFixed(2) + '</b></td>';
                    tbl += '</tr></tfoot>';
                }
                else {
                    console.log("Data not available");

                }
                tbl += '</table>';
                $("#reportsDaily1").html("").html(tbl);
               // $("#reportsDaily1").html(tbl);
                $.fn.DataTable.ext.pager.numbers_length = 6;
                $('#example1').DataTable({
                    dom: 'Bfrtip',
                    responsive: false,
                    lengthChange: false,
                    autoWidth: true,
                    paging: true,
                    lengthChange: false,
                    searching: true,
                    ordering: true,
                    info: true,
                    autoWidth: true,
                    responsive: false,
                    pageLength: 50,
                    buttons: [
                        {
                            extend: 'excel',
                            footer: true,
                            title: 'Wind Performance Reports Weekly SPV Wise',
                            "oSelectorOpts": { filter: 'applied', order: 'current' },
                            exportOptions: {
                                columns: ':visible',
                                modifier: {
                                    page: 'all'
                                },
                                format: {
                                    header: function (data, columnIdx) {
                                        if (columnIdx == 1) {
                                            return 'Capacity (MW)';
                                        }
                                        else if (columnIdx == 2) {
                                            return 'JMR Energy (in MU)  Tar';
                                        }
                                        else if (columnIdx == 3) {
                                            return 'JMR Energy (in MU) Act';
                                        }
                                        else if (columnIdx == 4) {
                                            return 'JMR Energy (in MU) Var (%)';
                                        }
                                        else if (columnIdx == 5) {
                                            return 'Revenue (MINR) ';
                                        }
                                        else if (columnIdx == 6) {
                                            return 'Wind Speed (m/s) Tar';
                                        }
                                        else if (columnIdx == 7) {
                                            return 'Wind Speed (m/s) Act ';
                                        }
                                        else if (columnIdx == 8) {
                                            return 'Wind Speed (m/s) Var (%) ';
                                        }
                                        else if (columnIdx == 9) {
                                            return 'PLF (%) Tar';
                                        }
                                        else if (columnIdx == 10) {
                                            return 'PLF (%) Act ';
                                        }
                                        else if (columnIdx == 11) {
                                            return 'PLF (%) Var (%) ';
                                        }
                                        else if (columnIdx == 12) {
                                            return 'MA Actual (%) Tar';
                                        }
                                        else if (columnIdx == 13) {
                                            return 'MA Actual (%) Act ';
                                        }
                                        else if (columnIdx == 14) {
                                            return 'MA Actual (%) Var (%) ';
                                        }
                                        else if (columnIdx == 15) {
                                            return 'IGA (%) Tar';
                                        }
                                        else if (columnIdx == 16) {
                                            return 'IGA (%) Act ';
                                        }
                                        else if (columnIdx == 17) {
                                            return 'IGA (%) Var (%) ';
                                        }
                                        else if (columnIdx == 18) {
                                            return 'EGA (%) Tar';
                                        }
                                        else if (columnIdx == 19) {
                                            return 'EGA (%) Act ';
                                        }
                                        else if (columnIdx == 20) {
                                            return 'EGA (%) Var (%) ';
                                        }
                                        else {
                                            return data;
                                        }
                                    }
                                }
                            }
                        },
                        {
                            extend: 'csv',
                            footer: true,
                            title: 'Wind Performance Reports Weekly SPV Wise',
                            "oSelectorOpts": { filter: 'applied', order: 'current' },
                            exportOptions: {
                                columns: ':visible',
                                modifier: {
                                    page: 'all'
                                },
                                format: {
                                    header: function (data, columnIdx) {
                                        if (columnIdx == 1) {
                                            return 'Capacity (MW)';
                                        }
                                        else if (columnIdx == 2) {
                                            return 'JMR Energy (in MU)  Tar';
                                        }
                                        else if (columnIdx == 3) {
                                            return 'JMR Energy (in MU) Act';
                                        }
                                        else if (columnIdx == 4) {
                                            return 'JMR Energy (in MU) Var (%)';
                                        }
                                        else if (columnIdx == 5) {
                                            return 'Revenue (MINR) ';
                                        }
                                        else if (columnIdx == 6) {
                                            return 'Wind Speed (m/s) Tar';
                                        }
                                        else if (columnIdx == 7) {
                                            return 'Wind Speed (m/s) Act ';
                                        }
                                        else if (columnIdx == 8) {
                                            return 'Wind Speed (m/s) Var (%) ';
                                        }
                                        else if (columnIdx == 9) {
                                            return 'PLF (%) Tar';
                                        }
                                        else if (columnIdx == 10) {
                                            return 'PLF (%) Act ';
                                        }
                                        else if (columnIdx == 11) {
                                            return 'PLF (%) Var (%) ';
                                        }
                                        else if (columnIdx == 12) {
                                            return 'MA Actual (%) Tar';
                                        }
                                        else if (columnIdx == 13) {
                                            return 'MA Actual (%) Act ';
                                        }
                                        else if (columnIdx == 14) {
                                            return 'MA Actual (%) Var (%) ';
                                        }
                                        else if (columnIdx == 15) {
                                            return 'IGA (%) Tar';
                                        }
                                        else if (columnIdx == 16) {
                                            return 'IGA (%) Act ';
                                        }
                                        else if (columnIdx == 17) {
                                            return 'IGA (%) Var (%) ';
                                        }
                                        else if (columnIdx == 18) {
                                            return 'EGA (%) Tar';
                                        }
                                        else if (columnIdx == 19) {
                                            return 'EGA (%) Act ';
                                        }
                                        else if (columnIdx == 20) {
                                            return 'EGA (%) Var (%) ';
                                        }
                                        else {
                                            return data;
                                        }
                                    }
                                }
                            }
                        },
                        'colvis'
                    ]
                });
                $(".dt-buttons").addClass('btn-group flex-wrap');
                $(".dt-buttons > button").addClass('btn btn-secondary');
                $(".dataTables_filter> label >input").addClass('form-control form-control-sm');
                //$('#example1').removeClass('dataTable');
                $('#example1').wrap("<div class='scrolledTable'></div>");
                //document.getElementById("reportsDaily").style.display = 'block';
               // document.getElementById("sitewisechart").style.display = 'none';
               // document.getElementById("spvwisechart").style.display = 'flex';
                RevenueChart(leble, revenue_arr);
            }
        });

    }
    function RevenueChart(lebels, data) {

        var ctx1 = $("#pieChart");
        //pie chart data
        var data1 = {
            labels: lebels, //["match1", "match2", "match3", "match4", "match5"],
            datasets: [
                {
                    label: lebels,
                    data: data,
                    backgroundColor: [
                        "#31576D",
                        "#86C466",
                        "#FFCA5A",
                        "#EE403D",
                        "#77CAE7",
                        "#31576D",
                        "#86C466",
                        "#FFCA5A",
                        "#EE403D",
                        "#77CAE7"
                    ],
                    borderColor: [
                        "#31576D",
                        "#86C466",
                        "#FFCA5A",
                        "#EE403D",
                        "#77CAE7",
                        "#31576D",
                        "#86C466",
                        "#FFCA5A",
                        "#EE403D",
                        "#77CAE7"
                    ],
                    borderWidth: [1, 1, 1, 1, 1]
                }
            ]
        };


        //options
        var options = {
            responsive: true,
            maintainAspectRatio: false,
            title: {
                display: true,
                position: "top",
                text: "Revenue (MINR) by SPVs",
                fontSize: 14,
                fontColor: "#111"
            },
            legend: {
                display: true,
                position: "left",
                labels: {
                    fontColor: "#333",
                    fontSize: 12
                }
            }
        };
        let chartStatus = Chart.getChart("pieChart"); // <canvas> id
        if (chartStatus != undefined) {
            chartStatus.destroy();
        }
        //create Chart class object
        var chart1 = new Chart(ctx1, {
            type: "pie",
            data: data1,
            options: options,
            maintainAspectRatio: false,
        });

    }
    //------------------------------------
    // Mothly Report SIte Wise
    function GetPerformanceBySite() {

        var daterange = $('#daterange').val();
        const dateArr = daterange.split("/");
        var seldate = new Date(dateArr[2], dateArr[1] - 1, dateArr[0]);
        var fromDate = GetWeeklyDays(seldate);
        var toDate = `${dateArr[2]}-${dateArr[1]}-${dateArr[0]}`;
        var fyear1 = fyear;//$('select#fy option:selected').val();
        var reporthead = "Site Wise Reports";
        var Energy_Dataset = [];
        var Wind_Dataset = [];
        var actual_energy = [];
        var target_energy = [];
        var pas_energy_var = [];
        var neg_energy_var = [];

        var actual_wind = [];
        var target_wind = [];
        var pas_wind_var = [];
        var neg_wind_var = [];
        var Levels = [];
        var site_ids = "@Html.Raw(windSiteList.TrimEnd(','))";
        //var Actual_Energy_Dataset = [];
        //var Energy_var_Dataset = [];
        $.ajax({
            type: "GET",
            url: '@Url.Action("GetWindPRReportSiteWise", "WindReport")' + '?fy=' + fyear1 + '&fromDate=' + fromDate + '&toDate=' + toDate + '&sitelist=' + site_ids,
            //url: "/WindReport/GetWindPRReportSiteWise?fy=" + fyear+" &fromDate=" + fromDate + "&toDate=" + toDate,
            contentType: "application/json; charset=utf-8",
            datatype: "JSON",
            success: function (result, status, xhr) {
                console.log(result);
               // var tbl = '<div class="text-center"><h5>' + reporthead + '</h5></div>';
                var tbl = '<table id="example2"  class="table table-bordered table-striped" style="width:150%">';
                tbl += '<thead class="tbl-head"><tr>';
                tbl += '<th rowspan="2">Site</th><th  rowspan="2">Capacity<br> (MW)</th>';
                tbl += '<th colspan="3" class="text-center">JMR Energy (in MU)</th><th>Revenue</th>';
                tbl += '<th colspan="3" class="text-center">Wind Speed (m/s)</th><th colspan="3" class="text-center">PLF</th>';
                tbl += '<th colspan="3" class="text-center">MA (Actual)</th><th colspan="3" class="text-center">IGA</th>';
                tbl += '<th colspan="3" class="text-center">EGA</th></tr>';
               // tbl += '<tr><th>&nbsp;</th>';
                //tbl += '<th>(MW)</th>';
                tbl += '<tr><th>Tar</th>';
                tbl += '<th>Act</th>';
                tbl += '<th>Var (%)</th>';
                tbl += '<th>(MINR)</th>';
                tbl += '<th>Tar</th>';
                tbl += '<th>Act</th>';
                tbl += '<th>Var (%)</th>';
                tbl += '<th>Tar</th>';
                tbl += '<th>Act</th>';
                tbl += '<th>Var (%)</th>';
                tbl += '<th>Tar</th>';
                tbl += '<th>Act</th>';
                tbl += '<th>Var (%)</th>';
                tbl += '<th>Tar</th>';
                tbl += '<th>Act</th>';
                tbl += '<th>Var (%)</th>';
                tbl += '<th>Tar</th>';
                tbl += '<th>Act</th>';
                tbl += '<th>Var (%)</th>';
                tbl += '</tr></thead>';

                if (result.length > 0) {
                    //let target_energy = [];
                    //let actual_energy = [];
                    //let pas_energy_var = [];
                    //let neg_energy_var = [];
                    //let target_wind = [];
                    //let actual_wind = [];
                    //let pas_wind_var = [];
                    //let neg_wind_var = [];

                    let total_capacity = 0;
                    let total_capTarMu = 0;
                    let total_tar_kwh_mu = 0;
                    let total_act_jmr_kwh_mu = 0;
                    let avg_jmr_var = 0;
                    let total_revenue = 0;
                    let total_capTarWind = 0;
                    let total_tar_wind = 0;
                    let total_act_wind = 0;
                    let avg_wind_var = 0;
                    let total_capTarPlf = 0;
                    let total_tar_plf = 0;
                    let total_act_plf = 0;
                    let avg_plf_var = 0;
                    let total_capTarMa = 0;
                    let total_tar_ma = 0;
                    let total_act_ma = 0;
                    let avg_ma_var = 0;
                    let total_capTarIga = 0;
                    let total_tar_iga = 0;
                    let total_act_iga = 0;
                    let avg_iga_var = 0;
                    let total_capTarEga = 0;
                    let total_tar_ega = 0;
                    let total_act_ega = 0;
                    let avg_ega_var = 0;
                    let total_capActWind = 0;
                    let total_capActPlf = 0;
                    let total_capActMa = 0;
                    let total_capActIga = 0;
                    let total_capActEga = 0;

                    for (var i = 0; i < result.length; i++) {
                        let revenue = 0;
                        let jmr_var = 0;
                        let wind_var = 0;
                        let plf_var = 0;
                        let ma_act_var = 0;
                        let iga_var = 0;
                        let ega_var = 0;
                        let tar_mu = 0;
                        tar_mu = result[i].tar_kwh_mu / 1000000;
                        revenue = ((result[i].act_jmr_kwh_mu - tar_mu) * result[i].total_tarrif);
                        if (result[i].act_jmr_kwh_mu != 0 || result[i].tar_kwh_mu != 0) {
                            jmr_var = ((result[i].act_jmr_kwh_mu - tar_mu) / tar_mu) * 100;
                        }
                        if (result[i].act_Wind != 0 || result[i].tar_wind != 0) {
                            wind_var = ((result[i].act_Wind.toFixed(2) - result[i].tar_wind.toFixed(2)) / result[i].tar_wind.toFixed(2)) * 100;
                        }
                       
                         plf_var = (result[i].act_plf - result[i].tar_plf);
                         ma_act_var = (result[i].act_ma - result[i].tar_ma);
                         iga_var = (result[i].act_iga - result[i].tar_iga);
                         ega_var = (result[i].act_ega - result[i].tar_ega);
                       
                        let pasitive;
                        let negative;
                        let g_pasitive;
                        let g_negative;
                        if (jmr_var < 0) {
                            negative = jmr_var;
                            g_negative = jmr_var.toFixed(1);
                        }
                        else {
                            pasitive = jmr_var;
                            g_pasitive = jmr_var.toFixed(1);
                        }
                        let w_pasitive;
                        let w_negative;
                        let gw_pasitive;
                        let gw_negative;
                        if (wind_var < 0) {
                            w_negative = wind_var;
                            gw_negative = wind_var.toFixed(1);
                        }
                        else {
                            w_pasitive = wind_var;
                            gw_pasitive = wind_var.toFixed(1);
                        }

                        target_energy.push((result[i].tar_kwh_mu/1000000).toFixed(1));
                        actual_energy.push(result[i].act_jmr_kwh_mu.toFixed(1));
                        pas_energy_var.push(g_pasitive);
                        neg_energy_var.push(g_negative);
                        Levels.push(result[i].site);

                        target_wind.push(result[i].tar_wind.toFixed(1));
                        actual_wind.push(result[i].act_Wind.toFixed(1));
                        pas_wind_var.push(gw_pasitive);
                        neg_wind_var.push(gw_negative);
                        total_capacity += result[i].total_mw;
                        total_tar_kwh_mu += (result[i].tar_kwh_mu / 1000000);
                        total_act_jmr_kwh_mu += result[i].act_jmr_kwh_mu;
                        total_revenue += revenue;
                        total_tar_wind += result[i].tar_wind;
                        total_act_wind += result[i].act_Wind;
                        total_tar_plf += result[i].tar_plf;
                        total_act_plf += result[i].act_plf;
                        total_tar_ma += result[i].tar_ma;
                        total_act_ma += result[i].act_ma;
                        total_tar_iga += result[i].tar_iga;
                        total_act_iga += result[i].act_iga
                        total_tar_ega += result[i].tar_ega;
                        total_act_ega += result[i].act_ega;
                        total_capTarMu += result[i].tar_kwh_mu * result[i].total_mw;
                        total_capTarWind += result[i].tar_wind * result[i].total_mw;
                        total_capTarPlf += result[i].tar_plf * result[i].total_mw;
                        total_capTarMa += result[i].tar_ma * result[i].total_mw;
                        total_capTarIga += result[i].tar_iga * result[i].total_mw;
                        total_capTarEga += result[i].tar_ega * result[i].total_mw;
                        total_capActWind += result[i].act_Wind * result[i].total_mw;
                        total_capActPlf += result[i].act_plf * result[i].total_mw;
                        total_capActMa += result[i].act_ma * result[i].total_mw;
                        total_capActIga += result[i].act_iga * result[i].total_mw;
                        total_capActEga += result[i].act_ega * result[i].total_mw;

                        tbl += '<tr>';
                        tbl += '<td class="text-left">' + result[i].site + '</td>';
                        tbl += '<td class="text-right">' + result[i].total_mw.toFixed(2) + '</td>';
                        tbl += '<td class="text-right">' + (result[i].tar_kwh_mu/1000000).toFixed(2) + '</td>';
                        tbl += '<td class="text-right">' + result[i].act_jmr_kwh_mu.toFixed(2) + '</td>';
                        tbl += '<td class="text-right">' + jmr_var.toFixed(2)+'</td>';
                        tbl += '<td class="text-right">' + revenue.toFixed(2)+'</td>';
                        tbl += '<td class="text-right">' + result[i].tar_wind.toFixed(2) + '</td>';
                        tbl += '<td class="text-right">' + result[i].act_Wind.toFixed(2) + '</td>';
                        tbl += '<td class="text-right">' + wind_var.toFixed(2)+'</td>';
                        tbl += '<td class="text-right">' + result[i].tar_plf.toFixed(2) + '</td>';
                        tbl += '<td class="text-right">' + result[i].act_plf.toFixed(2) + '</td>';
                        tbl += '<td class="text-right">' + plf_var.toFixed(2)+'</td>';
                        tbl += '<td class="text-right">' + result[i].tar_ma.toFixed(2) + '</td>';
                        tbl += '<td class="text-right">' + result[i].act_ma.toFixed(2) + '</td>';
                        tbl += '<td class="text-right">' + ma_act_var.toFixed(2)+'</td>';
                        tbl += '<td class="text-right">' + result[i].tar_iga.toFixed(2) + '</td>';
                        tbl += '<td class="text-right">' + result[i].act_iga.toFixed(2) + '</td>';
                        tbl += '<td class="text-right">' + iga_var.toFixed(2)+'</td>';
                        tbl += '<td class="text-right">' + result[i].tar_ega.toFixed(2) + '</td>';
                        tbl += '<td class="text-right">' + result[i].act_ega.toFixed(2) + '</td>';
                        tbl += '<td class="text-right">' + ega_var.toFixed(2)+'</td>';

                        tbl += '</tr>';
                    }
                    let avg_tar_mu = 0;
                    let avg_tar_wind = 0;
                    let avg_tar_plf = 0;
                    let avg_tar_ma = 0;
                    let avg_tar_iga = 0;
                    let avg_tar_ega = 0
                    let avg_act_wind = 0;
                    let avg_act_plf = 0;
                    let avg_act_ma = 0;
                    let avg_act_iga = 0;
                    let avg_act_ega = 0;

                    if (total_capacity != 0) {
                        avg_tar_mu = total_capTarMu / total_capacity;
                        avg_tar_wind = total_capTarWind / total_capacity;
                        avg_tar_plf = total_capTarPlf / total_capacity;
                        avg_tar_ma = total_capTarMa / total_capacity;
                        avg_tar_iga = total_capTarIga / total_capacity;
                        avg_tar_ega = total_capTarEga / total_capacity;
                        avg_act_wind = total_capActWind / total_capacity;
                        avg_act_plf = total_capActPlf / total_capacity;
                        avg_act_ma = total_capActMa / total_capacity;
                        avg_act_iga = total_capActIga / total_capacity;
                        avg_act_ega = total_capActEga / total_capacity;
                    }
                    if (total_tar_kwh_mu != 0) {
                        avg_jmr_var = (((total_act_jmr_kwh_mu - total_tar_kwh_mu) / total_tar_kwh_mu) * 100);
                    }
                    if (avg_tar_wind != 0) {
                        avg_wind_var = ((avg_act_wind.toFixed(2) - avg_tar_wind.toFixed(2)) / avg_tar_wind.toFixed(2)) * 100;
                    }
                    avg_plf_var = (avg_act_plf - avg_tar_plf);

                    avg_ma_var = (avg_act_ma - avg_tar_ma);

                    avg_iga_var = (avg_act_iga - avg_tar_iga);

                    avg_ega_var = (avg_act_ega - avg_tar_ega);


                    tbl += '<tfoot><tr>';
                    tbl += '<th rowspan="1"  style="width: 10%;"><b>Grand Total</b></th>';
                    tbl += '<td class="text-right"><b>' + total_capacity.toFixed(2) + '</b></td>';
                    tbl += '<td class="text-right"><b>' + total_tar_kwh_mu.toFixed(2) + '</b></td>';
                    tbl += '<td class="text-right"><b>' + total_act_jmr_kwh_mu.toFixed(2) + '</b></td>';
                    tbl += '<td class="text-right"><b>' + avg_jmr_var.toFixed(2) + '</b></td>';
                    tbl += '<td class="text-right"><b>' + total_revenue.toFixed(2) + '</b></td>';
                    tbl += '<td class="text-right"><b>' + avg_tar_wind.toFixed(2) + '</b></td>';
                    tbl += '<td class="text-right"><b>' + avg_act_wind.toFixed(2) + '</b></td>';
                    tbl += '<td class="text-right"><b>' + avg_wind_var.toFixed(2) + '</b></td>';
                    tbl += '<td class="text-right"><b>' + avg_tar_plf.toFixed(2) + '</b></td>';
                    tbl += '<td class="text-right"><b>' + avg_act_plf.toFixed(2) + '</b></td>';
                    tbl += '<td class="text-right"><b>' + avg_plf_var.toFixed(2) + '</b></td>';
                    tbl += '<td class="text-right"><b>' + avg_tar_ma.toFixed(2) + '</b></td>';
                    tbl += '<td class="text-right"><b>' + avg_act_ma.toFixed(2) + '</b></td>';
                    tbl += '<td class="text-right"><b>' + avg_ma_var.toFixed(2) + '</b></td>';
                    tbl += '<td class="text-right"><b>' + avg_tar_iga.toFixed(2) + '</b></td>';
                    tbl += '<td class="text-right"><b>' + avg_act_iga.toFixed(2) + '</b></td>';
                    tbl += '<td class="text-right"><b>' + avg_iga_var.toFixed(2) + '</b></td>';
                    tbl += '<td class="text-right"><b>' + avg_tar_ega.toFixed(2) + '</b></td>';
                    tbl += '<td class="text-right"><b>' + avg_act_ega.toFixed(2) + '</b></td>';
                    tbl += '<td class="text-right"><b>' + avg_ega_var.toFixed(2) + '</b></td>';
                    tbl += '</tr></tfoot>';


                }
                else {
                    console.log("Data not available");

                }
                tbl += '</table>';
               // $("#reportsDaily").html(tbl);
                $("#reportsDaily").html("").html(tbl);
                $.fn.DataTable.ext.pager.numbers_length = 6;
                $('#example2').DataTable({
                    dom: 'Bfrtip',
                    responsive: false,
                    lengthChange: false,
                    autoWidth: true,
                    paging: true,
                    lengthChange: false,
                    searching: true,
                    ordering: true,
                    info: true,
                    autoWidth: true,
                    responsive: false,
                    pageLength: 50,
                    buttons: [
                        {
                            extend: 'excel',
                            footer: true,
                            title: 'Wind Performance Reports Weekly Site Wise',
                            "oSelectorOpts": { filter: 'applied', order: 'current' },
                            exportOptions: {
                                columns: ':visible',
                                modifier: {
                                    page: 'all'
                                },
                                format: {
                                    header: function (data, columnIdx) {
                                        if (columnIdx == 1) {
                                            return 'Capacity (MW)';
                                        }
                                        else if (columnIdx == 2) {
                                            return 'JMR Energy (in MU)  Tar';
                                        }
                                        else if (columnIdx == 3) {
                                            return 'JMR Energy (in MU) Act';
                                        }
                                        else if (columnIdx == 4) {
                                            return 'JMR Energy (in MU) Var (%)';
                                        }
                                        else if (columnIdx == 5) {
                                            return 'Revenue (MINR) ';
                                        }
                                        else if (columnIdx == 6) {
                                            return 'Wind Speed (m/s) Tar';
                                        }
                                        else if (columnIdx == 7) {
                                            return 'Wind Speed (m/s) Act ';
                                        }
                                        else if (columnIdx == 8) {
                                            return 'Wind Speed (m/s) Var (%) ';
                                        }
                                        else if (columnIdx == 9) {
                                            return 'PLF (%) Tar';
                                        }
                                        else if (columnIdx == 10) {
                                            return 'PLF (%) Act ';
                                        }
                                        else if (columnIdx == 11) {
                                            return 'PLF (%) Var (%) ';
                                        }
                                        else if (columnIdx == 12) {
                                            return 'MA Actual (%) Tar';
                                        }
                                        else if (columnIdx == 13) {
                                            return 'MA Actual (%) Act ';
                                        }
                                        else if (columnIdx == 14) {
                                            return 'MA Actual (%) Var (%) ';
                                        }
                                        else if (columnIdx == 15) {
                                            return 'IGA (%) Tar';
                                        }
                                        else if (columnIdx == 16) {
                                            return 'IGA (%) Act ';
                                        }
                                        else if (columnIdx == 17) {
                                            return 'IGA (%) Var (%) ';
                                        }
                                        else if (columnIdx == 18) {
                                            return 'EGA (%) Tar';
                                        }
                                        else if (columnIdx == 19) {
                                            return 'EGA (%) Act ';
                                        }
                                        else if (columnIdx == 20) {
                                            return 'EGA (%) Var (%) ';
                                        }
                                        else {
                                            return data;
                                        }
                                    }
                                }
                            }
                        },
                        {
                            extend: 'csv',
                            footer: true,
                            title: 'Wind Performance Reports Weekly Site Wise',
                            "oSelectorOpts": { filter: 'applied', order: 'current' },
                            exportOptions: {
                                columns: ':visible',
                                modifier: {
                                    page: 'all'
                                },
                                format: {
                                    header: function (data, columnIdx) {
                                        if (columnIdx == 1) {
                                            return 'Capacity (MW)';
                                        }
                                        else if (columnIdx == 2) {
                                            return 'JMR Energy (in MU)  Tar';
                                        }
                                        else if (columnIdx == 3) {
                                            return 'JMR Energy (in MU) Act';
                                        }
                                        else if (columnIdx == 4) {
                                            return 'JMR Energy (in MU) Var (%)';
                                        }
                                        else if (columnIdx == 5) {
                                            return 'Revenue (MINR) ';
                                        }
                                        else if (columnIdx == 6) {
                                            return 'Wind Speed (m/s) Tar';
                                        }
                                        else if (columnIdx == 7) {
                                            return 'Wind Speed (m/s) Act ';
                                        }
                                        else if (columnIdx == 8) {
                                            return 'Wind Speed (m/s) Var (%) ';
                                        }
                                        else if (columnIdx == 9) {
                                            return 'PLF (%) Tar';
                                        }
                                        else if (columnIdx == 10) {
                                            return 'PLF (%) Act ';
                                        }
                                        else if (columnIdx == 11) {
                                            return 'PLF (%) Var (%) ';
                                        }
                                        else if (columnIdx == 12) {
                                            return 'MA Actual (%) Tar';
                                        }
                                        else if (columnIdx == 13) {
                                            return 'MA Actual (%) Act ';
                                        }
                                        else if (columnIdx == 14) {
                                            return 'MA Actual (%) Var (%) ';
                                        }
                                        else if (columnIdx == 15) {
                                            return 'IGA (%) Tar';
                                        }
                                        else if (columnIdx == 16) {
                                            return 'IGA (%) Act ';
                                        }
                                        else if (columnIdx == 17) {
                                            return 'IGA (%) Var (%) ';
                                        }
                                        else if (columnIdx == 18) {
                                            return 'EGA (%) Tar';
                                        }
                                        else if (columnIdx == 19) {
                                            return 'EGA (%) Act ';
                                        }
                                        else if (columnIdx == 20) {
                                            return 'EGA (%) Var (%) ';
                                        }
                                        else {
                                            return data;
                                        }
                                    }
                                }
                            }
                        },
                        'colvis'
                    ]
                });
                $(".dt-buttons").addClass('btn-group flex-wrap');
                $(".dt-buttons > button").addClass('btn btn-secondary');
                $(".dataTables_filter> label >input").addClass('form-control form-control-sm');
                $('#example2').wrap("<div class='scrolledTable'></div>");
                EnergyBarChart(target_energy, actual_energy, pas_energy_var, neg_energy_var, Levels);
                WindBarChart(target_wind, actual_wind, pas_wind_var, neg_wind_var, Levels);
            }
        });
    }
    function EnergyBarChart(target_energy, actual_energy, pas_energy_var, neg_energy_var, Levels) {
        let chartStatus = Chart.getChart("energy_chart_pr"); // <canvas> id
        if (chartStatus != undefined) {
            chartStatus.destroy();
        }
        new Chart(document.getElementById("energy_chart_pr"), {
            type: 'bar',
            data: {
                labels: Levels,
                datasets: [{
                    yAxisID: 'en_site',
                    label: "Target Energy",
                    type: "bar",
                    backgroundColor: "#77CAE7",
                    data: target_energy,
                    order: 1,
                    datalabels: {
                        anchor: 'center',
                        align: 'top',
                        color: 'white',
                        labels: {
                            title: {
                                font: {
                                    weight: 'bold'

                                }
                            },
                        },
                    },
                }, {
                    yAxisID: 'en_site',
                    label: "Actual Energy",
                    type: "bar",
                    backgroundColor: "#31576D",
                    backgroundColorHover: "#3e95cd",
                    data: actual_energy,
                    order: 1,
                    datalabels: {
                        anchor: 'center',
                        align: 'top',
                        color: 'white',
                        labels: {
                            title: {
                                font: {
                                    weight: 'bold'

                                }
                            },
                        },
                    },
                },{
                    yAxisID: 'var_site',
                    label: "(+ve) %",
                    type: "bubble",
                    borderColor: "#86C466",
                    data: pas_energy_var,
                    order: 0,
                    fill: false,
                    datalabels: {
                        anchor: 'end',
                        align: 'top'
                        //offset: 5

                    },

                }, {
                    yAxisID: 'var_site',
                    label: "(-ve) %",
                    type: "bubble",
                    borderColor: "#EE403D",
                    data: neg_energy_var,
                    order: 0,
                    fill: false,
                    datalabels: {
                        anchor: 'end',
                        align: 'top',
                        offset: 5

                    },
                }]
            },
            plugins: [ChartDataLabels],
            options: {
                responsive: true,
                plugins: {
                    title: {
                        display: true,
                        text: 'Energy(MWh)'
                    },
                    legend: {
                        display: true,
                        position: "bottom"
                    }
                },
                scales: {
                    en_site: {
                        type: 'linear',
                        position: 'left',
                        grid: { display: false }
                    },
                    var_site: {
                        type: 'linear',
                        position: 'right',
                        //ticks: { beginAtZero: true, },
                        ticks: {
                            display: false,
                        },
                        grid: { display: false }
                    },
                }
            }

        });

    }

    function WindBarChart(target_wind, actual_wind, pas_wind_var, neg_wind_var, Levels) {
        let chartStatus = Chart.getChart("wind_chart_pr"); // <canvas> id
        if (chartStatus != undefined) {
            chartStatus.destroy();
        }
        new Chart(document.getElementById("wind_chart_pr"), {
            type: 'bar',
            data: {
                labels: Levels,
                datasets: [{
                    yAxisID: 'wind_en',
                    label: "Target Wind",
                    type: "bar",
                    backgroundColor: "#77CAE7",
                    data: target_wind,
                    order: 1,
                    fill: false,
                    datalabels: {
                        anchor: 'center',
                        align: 'top',
                        color: 'white',
                        labels: {
                            title: {
                                font: {
                                    weight: 'bold'

                                }
                            },
                        },

                    },

                }, {
                    yAxisID: 'wind_en',
                    label: "Actual Wind",
                    type: "bar",
                    backgroundColor: "#31576D",
                    backgroundColorHover: "#3e95cd",
                    data: actual_wind,
                    order: 1,
                    fill: false,
                    datalabels: {
                        anchor: 'center',
                        align: 'top',
                        color: 'white',
                        labels: {
                            title: {
                                font: {
                                    weight: 'bold'

                                }
                            },
                        },

                    },
                },{
                    yAxisID: 'wind_var',
                    label: "(+ve) %",
                    type: "bubble",
                    borderColor: "#86C466",
                    data: pas_wind_var,
                    order: 0,
                    fill: false,
                    fill: false,
                    datalabels: {
                        anchor: 'end',
                        align: 'top',

                    },
                }, {
                    yAxisID: 'wind_var',
                    label: "(-ve) %",
                    type: "bubble",
                    borderColor: "#EE403D",
                    data: neg_wind_var,
                    order: 0,
                    fill: false,
                    datalabels: {
                        anchor: 'end',
                        align: 'top',
                        offset: 5
                    },
                }]
            },
            plugins: [ChartDataLabels],
            options: {
                responsive: true,
                plugins: {
                    title: {
                        display: true,
                        text: 'Wind(m/s)'
                    },
                    legend: {
                        display: true,
                        position: "bottom"
                    }
                },
                scales: {
                    wind_en: {
                        type: 'linear',
                        position: 'left',
                        grid: { display: false }
                    },
                    wind_var: {
                        type: 'linear',
                        position: 'right',
                        //ticks: { beginAtZero: true, },
                        ticks: {
                            display: false,
                        },
                        grid: { display: false }
                    },
                }
            }

        });

    }

function GetWindMajorBreakdown() {

        var daterange = $('#daterange').val();
        const dateArr = daterange.split("/");
        var seldate = new Date(dateArr[2], dateArr[1] - 1, dateArr[0]);
        var fromDate = GetWeeklyDays(seldate);
        var toDate = `${dateArr[2]}-${dateArr[1]}-${dateArr[0]}`;
        var site_ids = "@Html.Raw(windSiteList.TrimEnd(','))";
        var leble = [];
        var revenue_arr = [];

        $.ajax({
            type: "GET",
            url: '@Url.Action("GetWindMajorBreakdown", "WindReport")' + '?fromDate=' + fromDate + '&toDate=' + toDate + '&siteList=' + site_ids,
            contentType: "application/json; charset=utf-8",

            datatype: "JSON",
            success: function (result, status, xhr) {
                console.log(result);
                //var tbl = '<div class="text-center"><h5>' + reporthead+'</h5></div>';
                var tbl= '<table id="example3"  class="table table-bordered table-striped" style="width:100%">';
                tbl += '<thead class="tbl-head"><tr>';
                tbl += '<th>Date</th>';
                tbl += '<th>Site</th>';
                tbl += '<th>Location</th>';
                tbl += '<th>BD Type</th>';
                tbl += '<th>TAT</th> ';
                tbl += '<th>Reason Of Breakdown</th> ';

                tbl += '</tr></thead><tbody>';

                if (result.length > 0) {

                    for (var i = 0; i < result.length; i++) {
                        //let total_time = "";
                        //let no_of_wtg = 0;
                        //let bd_type = "";
                        //let total_time = "";
                        let total_time = toHoursAndMinutes(result[i].total_stop.totalSeconds);
                       // console.log("Total Time", total_time);
                        if ((result[i].bd_type_id == 1 || result[i].bd_type_id == 2) && +total_time.split(":")[0] >= 4) {
                       tbl += '<tr>';
                            tbl += '<td class="text-left">' + result[i].date + '</td>';
                            tbl += '<td class="text-left">' + result[i].site_name + '</td>';
                            tbl += '<td class="text-left">' + result[i].wtg_cnt + ' WTGs</td>';
                            tbl += '<td class="text-left">' + result[i].bd_type + '</td>';
                            tbl += '<td class="text-left">' + total_time + '</td>';
                            //tbl += '<td class="text-left">' + result[i].stop_from + ' - ' + result[i].stop_to + ' = ' + result[i].total_stop + '</td>';
                            tbl += '<td class="text-left">' + result[i].error_description +'</td>';
                            tbl += '</tr>';
                       }
                        if ((result[i].bd_type_id != 1 && result[i].bd_type_id != 2) && +total_time.split(":")[0] >= 1) {
                       tbl += '<tr>';
                            tbl += '<td class="text-left">' + result[i].date + '</td>';
                            tbl += '<td class="text-left">' + result[i].site_name + '</td>';
                            tbl += '<td class="text-left">' + result[i].wtg_cnt + ' WTGs</td>';
                            tbl += '<td class="text-left">' + result[i].bd_type + '</td>';
                            tbl += '<td class="text-left">' + total_time + '</td>';
                            //tbl += '<td class="text-left">' + result[i].stop_from + ' - ' + result[i].stop_to+' = '+ result[i].total_stop + '</td>';
                            tbl += '<td class="text-left">' + result[i].error_description +'</td>';
                            tbl += '</tr>';
                       }

                    }
                }
                else {
                    console.log("Data not available");
                }

                tbl += '</tbody></table>';
                //$("#majorBreakdown").html(tbl);
                $("#majorBreakdown").html("").html(tbl);
                //$.fn.DataTable.ext.pager.numbers_length = 6;
                $('#example3').DataTable({
                    dom: 'Bfrtip',
                    responsive: false,
                    lengthChange: false,
                    autoWidth: false,
                    paging: true,
                    lengthChange: false,
                    searching: true,
                    ordering: true,
                    info: true,
                    autoWidth: false,
                    responsive: false,
                    pageLength: 50,
                    buttons: [
                        {
                            extend: 'excel',
                            title: 'Wind Mejor Breakdown Reports',
                            exportOptions: {
                                columns: ':visible'
                            }
                        },
                        {
                            extend: 'csv',
                            title: 'Wind Mejor Breakdown Reports',
                            exportOptions: {
                                columns: ':visible'
                            }
                        },
                        'colvis'
                    ]
                });
                $(".dt-buttons").addClass('btn-group flex-wrap');
                $(".dt-buttons > button").addClass('btn btn-secondary');
                $(".dataTables_filter> label >input").addClass('form-control form-control-sm');
                $('#example1').removeClass('dataTable');
                //document.getElementById("reportsDaily").style.display = 'block';

            }
        });

    }


</script>
